
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002174  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402174  00402174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000100c  20400000  0040217c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  2040100c  00403188  0002100c  2**2
                  ALLOC
  4 .stack        00002004  204010bc  00403238  0002100c  2**0
                  ALLOC
  5 .heap         00000200  204030c0  0040523c  0002100c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002100c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002103a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000ac8c  00000000  00000000  00021093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001571  00000000  00000000  0002bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000035d0  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000620  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c2b4  00000000  00000000  00031410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006b3e  00000000  00000000  0004d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000895da  00000000  00000000  00054202  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001c54  00000000  00000000  000dd7dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 30 40 20 01 0c 40 00 b1 0c 40 00 b1 0c 40 00     .0@ ..@...@...@.
  400010:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 b1 0c 40 00     ..@...@.......@.
  40003c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40004c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40005c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 b9 07 40 00     ..@...@.......@.
  40006c:	d1 07 40 00 e9 07 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40007c:	b1 0c 40 00 01 08 40 00 19 08 40 00 b1 0c 40 00     ..@...@...@...@.
  40008c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40009c:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000ac:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000bc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000cc:	b1 0c 40 00 00 00 00 00 b1 0c 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000ec:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  4000fc:	b1 0c 40 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ..@...@...@...@.
  40010c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b1 0c 40 00 b1 0c 40 00 b1 0c 40 00     ......@...@...@.
  40012c:	b1 0c 40 00 b1 0c 40 00 00 00 00 00 b1 0c 40 00     ..@...@.......@.
  40013c:	b1 0c 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040100c 	.word	0x2040100c
  40015c:	00000000 	.word	0x00000000
  400160:	0040217c 	.word	0x0040217c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040217c 	.word	0x0040217c
  4001a0:	20401010 	.word	0x20401010
  4001a4:	0040217c 	.word	0x0040217c
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400931 	.word	0x00400931
  40022c:	0040099d 	.word	0x0040099d
  400230:	00400a0d 	.word	0x00400a0d

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400969 	.word	0x00400969
  4002a0:	00400a85 	.word	0x00400a85

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400aa1 	.word	0x00400aa1
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400abd 	.word	0x00400abd
  400418:	00400ad9 	.word	0x00400ad9

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00400e21 	.word	0x00400e21
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400831 	.word	0x00400831
  40051c:	004008ad 	.word	0x004008ad
  400520:	00400cb9 	.word	0x00400cb9
  400524:	00400499 	.word	0x00400499

00400528 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400528:	b480      	push	{r7}
  40052a:	b085      	sub	sp, #20
  40052c:	af00      	add	r7, sp, #0
  40052e:	60f8      	str	r0, [r7, #12]
  400530:	60b9      	str	r1, [r7, #8]
  400532:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400534:	687b      	ldr	r3, [r7, #4]
  400536:	2b00      	cmp	r3, #0
  400538:	d003      	beq.n	400542 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40053a:	68fb      	ldr	r3, [r7, #12]
  40053c:	68ba      	ldr	r2, [r7, #8]
  40053e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400540:	e002      	b.n	400548 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400542:	68fb      	ldr	r3, [r7, #12]
  400544:	68ba      	ldr	r2, [r7, #8]
  400546:	661a      	str	r2, [r3, #96]	; 0x60
}
  400548:	bf00      	nop
  40054a:	3714      	adds	r7, #20
  40054c:	46bd      	mov	sp, r7
  40054e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400552:	4770      	bx	lr

00400554 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400554:	b480      	push	{r7}
  400556:	b083      	sub	sp, #12
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	631a      	str	r2, [r3, #48]	; 0x30
}
  400564:	bf00      	nop
  400566:	370c      	adds	r7, #12
  400568:	46bd      	mov	sp, r7
  40056a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40056e:	4770      	bx	lr

00400570 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
  400578:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  40057a:	687b      	ldr	r3, [r7, #4]
  40057c:	683a      	ldr	r2, [r7, #0]
  40057e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400580:	bf00      	nop
  400582:	370c      	adds	r7, #12
  400584:	46bd      	mov	sp, r7
  400586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40058a:	4770      	bx	lr

0040058c <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40058c:	b480      	push	{r7}
  40058e:	b087      	sub	sp, #28
  400590:	af00      	add	r7, sp, #0
  400592:	60f8      	str	r0, [r7, #12]
  400594:	60b9      	str	r1, [r7, #8]
  400596:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400598:	68bb      	ldr	r3, [r7, #8]
  40059a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40059e:	d003      	beq.n	4005a8 <pio_get+0x1c>
  4005a0:	68bb      	ldr	r3, [r7, #8]
  4005a2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005a6:	d103      	bne.n	4005b0 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  4005a8:	68fb      	ldr	r3, [r7, #12]
  4005aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4005ac:	617b      	str	r3, [r7, #20]
  4005ae:	e002      	b.n	4005b6 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4005b0:	68fb      	ldr	r3, [r7, #12]
  4005b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4005b4:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  4005b6:	697a      	ldr	r2, [r7, #20]
  4005b8:	687b      	ldr	r3, [r7, #4]
  4005ba:	4013      	ands	r3, r2
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d101      	bne.n	4005c4 <pio_get+0x38>
		return 0;
  4005c0:	2300      	movs	r3, #0
  4005c2:	e000      	b.n	4005c6 <pio_get+0x3a>
	} else {
		return 1;
  4005c4:	2301      	movs	r3, #1
	}
}
  4005c6:	4618      	mov	r0, r3
  4005c8:	371c      	adds	r7, #28
  4005ca:	46bd      	mov	sp, r7
  4005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005d0:	4770      	bx	lr
	...

004005d4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b084      	sub	sp, #16
  4005d8:	af00      	add	r7, sp, #0
  4005da:	60f8      	str	r0, [r7, #12]
  4005dc:	60b9      	str	r1, [r7, #8]
  4005de:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4005e0:	68b9      	ldr	r1, [r7, #8]
  4005e2:	68f8      	ldr	r0, [r7, #12]
  4005e4:	4b19      	ldr	r3, [pc, #100]	; (40064c <pio_set_input+0x78>)
  4005e6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4005e8:	687b      	ldr	r3, [r7, #4]
  4005ea:	f003 0301 	and.w	r3, r3, #1
  4005ee:	461a      	mov	r2, r3
  4005f0:	68b9      	ldr	r1, [r7, #8]
  4005f2:	68f8      	ldr	r0, [r7, #12]
  4005f4:	4b16      	ldr	r3, [pc, #88]	; (400650 <pio_set_input+0x7c>)
  4005f6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	f003 030a 	and.w	r3, r3, #10
  4005fe:	2b00      	cmp	r3, #0
  400600:	d003      	beq.n	40060a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	68ba      	ldr	r2, [r7, #8]
  400606:	621a      	str	r2, [r3, #32]
  400608:	e002      	b.n	400610 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40060a:	68fb      	ldr	r3, [r7, #12]
  40060c:	68ba      	ldr	r2, [r7, #8]
  40060e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400610:	687b      	ldr	r3, [r7, #4]
  400612:	f003 0302 	and.w	r3, r3, #2
  400616:	2b00      	cmp	r3, #0
  400618:	d004      	beq.n	400624 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40061a:	68fb      	ldr	r3, [r7, #12]
  40061c:	68ba      	ldr	r2, [r7, #8]
  40061e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400622:	e008      	b.n	400636 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	f003 0308 	and.w	r3, r3, #8
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	68ba      	ldr	r2, [r7, #8]
  400632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	68ba      	ldr	r2, [r7, #8]
  40063a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	68ba      	ldr	r2, [r7, #8]
  400640:	601a      	str	r2, [r3, #0]
}
  400642:	bf00      	nop
  400644:	3710      	adds	r7, #16
  400646:	46bd      	mov	sp, r7
  400648:	bd80      	pop	{r7, pc}
  40064a:	bf00      	nop
  40064c:	004006b9 	.word	0x004006b9
  400650:	00400529 	.word	0x00400529

00400654 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400654:	b580      	push	{r7, lr}
  400656:	b084      	sub	sp, #16
  400658:	af00      	add	r7, sp, #0
  40065a:	60f8      	str	r0, [r7, #12]
  40065c:	60b9      	str	r1, [r7, #8]
  40065e:	607a      	str	r2, [r7, #4]
  400660:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400662:	68b9      	ldr	r1, [r7, #8]
  400664:	68f8      	ldr	r0, [r7, #12]
  400666:	4b12      	ldr	r3, [pc, #72]	; (4006b0 <pio_set_output+0x5c>)
  400668:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40066a:	69ba      	ldr	r2, [r7, #24]
  40066c:	68b9      	ldr	r1, [r7, #8]
  40066e:	68f8      	ldr	r0, [r7, #12]
  400670:	4b10      	ldr	r3, [pc, #64]	; (4006b4 <pio_set_output+0x60>)
  400672:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400674:	683b      	ldr	r3, [r7, #0]
  400676:	2b00      	cmp	r3, #0
  400678:	d003      	beq.n	400682 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	68ba      	ldr	r2, [r7, #8]
  40067e:	651a      	str	r2, [r3, #80]	; 0x50
  400680:	e002      	b.n	400688 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	2b00      	cmp	r3, #0
  40068c:	d003      	beq.n	400696 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40068e:	68fb      	ldr	r3, [r7, #12]
  400690:	68ba      	ldr	r2, [r7, #8]
  400692:	631a      	str	r2, [r3, #48]	; 0x30
  400694:	e002      	b.n	40069c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	68ba      	ldr	r2, [r7, #8]
  4006a0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4006a2:	68fb      	ldr	r3, [r7, #12]
  4006a4:	68ba      	ldr	r2, [r7, #8]
  4006a6:	601a      	str	r2, [r3, #0]
}
  4006a8:	bf00      	nop
  4006aa:	3710      	adds	r7, #16
  4006ac:	46bd      	mov	sp, r7
  4006ae:	bd80      	pop	{r7, pc}
  4006b0:	004006b9 	.word	0x004006b9
  4006b4:	00400529 	.word	0x00400529

004006b8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4006b8:	b480      	push	{r7}
  4006ba:	b083      	sub	sp, #12
  4006bc:	af00      	add	r7, sp, #0
  4006be:	6078      	str	r0, [r7, #4]
  4006c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4006c2:	687b      	ldr	r3, [r7, #4]
  4006c4:	683a      	ldr	r2, [r7, #0]
  4006c6:	645a      	str	r2, [r3, #68]	; 0x44
}
  4006c8:	bf00      	nop
  4006ca:	370c      	adds	r7, #12
  4006cc:	46bd      	mov	sp, r7
  4006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006d2:	4770      	bx	lr

004006d4 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4006d4:	b480      	push	{r7}
  4006d6:	b083      	sub	sp, #12
  4006d8:	af00      	add	r7, sp, #0
  4006da:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4006dc:	687b      	ldr	r3, [r7, #4]
  4006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4006e0:	4618      	mov	r0, r3
  4006e2:	370c      	adds	r7, #12
  4006e4:	46bd      	mov	sp, r7
  4006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ea:	4770      	bx	lr

004006ec <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4006ec:	b480      	push	{r7}
  4006ee:	b083      	sub	sp, #12
  4006f0:	af00      	add	r7, sp, #0
  4006f2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4006f4:	687b      	ldr	r3, [r7, #4]
  4006f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4006f8:	4618      	mov	r0, r3
  4006fa:	370c      	adds	r7, #12
  4006fc:	46bd      	mov	sp, r7
  4006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400702:	4770      	bx	lr

00400704 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400704:	b580      	push	{r7, lr}
  400706:	b084      	sub	sp, #16
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
  40070c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40070e:	6878      	ldr	r0, [r7, #4]
  400710:	4b26      	ldr	r3, [pc, #152]	; (4007ac <pio_handler_process+0xa8>)
  400712:	4798      	blx	r3
  400714:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400716:	6878      	ldr	r0, [r7, #4]
  400718:	4b25      	ldr	r3, [pc, #148]	; (4007b0 <pio_handler_process+0xac>)
  40071a:	4798      	blx	r3
  40071c:	4602      	mov	r2, r0
  40071e:	68fb      	ldr	r3, [r7, #12]
  400720:	4013      	ands	r3, r2
  400722:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400724:	68fb      	ldr	r3, [r7, #12]
  400726:	2b00      	cmp	r3, #0
  400728:	d03c      	beq.n	4007a4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40072a:	2300      	movs	r3, #0
  40072c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40072e:	e034      	b.n	40079a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400730:	4a20      	ldr	r2, [pc, #128]	; (4007b4 <pio_handler_process+0xb0>)
  400732:	68bb      	ldr	r3, [r7, #8]
  400734:	011b      	lsls	r3, r3, #4
  400736:	4413      	add	r3, r2
  400738:	681a      	ldr	r2, [r3, #0]
  40073a:	683b      	ldr	r3, [r7, #0]
  40073c:	429a      	cmp	r2, r3
  40073e:	d126      	bne.n	40078e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400740:	4a1c      	ldr	r2, [pc, #112]	; (4007b4 <pio_handler_process+0xb0>)
  400742:	68bb      	ldr	r3, [r7, #8]
  400744:	011b      	lsls	r3, r3, #4
  400746:	4413      	add	r3, r2
  400748:	3304      	adds	r3, #4
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	68fb      	ldr	r3, [r7, #12]
  40074e:	4013      	ands	r3, r2
  400750:	2b00      	cmp	r3, #0
  400752:	d01c      	beq.n	40078e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400754:	4a17      	ldr	r2, [pc, #92]	; (4007b4 <pio_handler_process+0xb0>)
  400756:	68bb      	ldr	r3, [r7, #8]
  400758:	011b      	lsls	r3, r3, #4
  40075a:	4413      	add	r3, r2
  40075c:	330c      	adds	r3, #12
  40075e:	681b      	ldr	r3, [r3, #0]
  400760:	4914      	ldr	r1, [pc, #80]	; (4007b4 <pio_handler_process+0xb0>)
  400762:	68ba      	ldr	r2, [r7, #8]
  400764:	0112      	lsls	r2, r2, #4
  400766:	440a      	add	r2, r1
  400768:	6810      	ldr	r0, [r2, #0]
  40076a:	4912      	ldr	r1, [pc, #72]	; (4007b4 <pio_handler_process+0xb0>)
  40076c:	68ba      	ldr	r2, [r7, #8]
  40076e:	0112      	lsls	r2, r2, #4
  400770:	440a      	add	r2, r1
  400772:	3204      	adds	r2, #4
  400774:	6812      	ldr	r2, [r2, #0]
  400776:	4611      	mov	r1, r2
  400778:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40077a:	4a0e      	ldr	r2, [pc, #56]	; (4007b4 <pio_handler_process+0xb0>)
  40077c:	68bb      	ldr	r3, [r7, #8]
  40077e:	011b      	lsls	r3, r3, #4
  400780:	4413      	add	r3, r2
  400782:	3304      	adds	r3, #4
  400784:	681b      	ldr	r3, [r3, #0]
  400786:	43db      	mvns	r3, r3
  400788:	68fa      	ldr	r2, [r7, #12]
  40078a:	4013      	ands	r3, r2
  40078c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40078e:	68bb      	ldr	r3, [r7, #8]
  400790:	3301      	adds	r3, #1
  400792:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400794:	68bb      	ldr	r3, [r7, #8]
  400796:	2b06      	cmp	r3, #6
  400798:	d803      	bhi.n	4007a2 <pio_handler_process+0x9e>
		while (status != 0) {
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	2b00      	cmp	r3, #0
  40079e:	d1c7      	bne.n	400730 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4007a0:	e000      	b.n	4007a4 <pio_handler_process+0xa0>
				break;
  4007a2:	bf00      	nop
}
  4007a4:	bf00      	nop
  4007a6:	3710      	adds	r7, #16
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bd80      	pop	{r7, pc}
  4007ac:	004006d5 	.word	0x004006d5
  4007b0:	004006ed 	.word	0x004006ed
  4007b4:	20401028 	.word	0x20401028

004007b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007b8:	b580      	push	{r7, lr}
  4007ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4007bc:	210a      	movs	r1, #10
  4007be:	4802      	ldr	r0, [pc, #8]	; (4007c8 <PIOA_Handler+0x10>)
  4007c0:	4b02      	ldr	r3, [pc, #8]	; (4007cc <PIOA_Handler+0x14>)
  4007c2:	4798      	blx	r3
}
  4007c4:	bf00      	nop
  4007c6:	bd80      	pop	{r7, pc}
  4007c8:	400e0e00 	.word	0x400e0e00
  4007cc:	00400705 	.word	0x00400705

004007d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007d0:	b580      	push	{r7, lr}
  4007d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4007d4:	210b      	movs	r1, #11
  4007d6:	4802      	ldr	r0, [pc, #8]	; (4007e0 <PIOB_Handler+0x10>)
  4007d8:	4b02      	ldr	r3, [pc, #8]	; (4007e4 <PIOB_Handler+0x14>)
  4007da:	4798      	blx	r3
}
  4007dc:	bf00      	nop
  4007de:	bd80      	pop	{r7, pc}
  4007e0:	400e1000 	.word	0x400e1000
  4007e4:	00400705 	.word	0x00400705

004007e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4007ec:	210c      	movs	r1, #12
  4007ee:	4802      	ldr	r0, [pc, #8]	; (4007f8 <PIOC_Handler+0x10>)
  4007f0:	4b02      	ldr	r3, [pc, #8]	; (4007fc <PIOC_Handler+0x14>)
  4007f2:	4798      	blx	r3
}
  4007f4:	bf00      	nop
  4007f6:	bd80      	pop	{r7, pc}
  4007f8:	400e1200 	.word	0x400e1200
  4007fc:	00400705 	.word	0x00400705

00400800 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400800:	b580      	push	{r7, lr}
  400802:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400804:	2110      	movs	r1, #16
  400806:	4802      	ldr	r0, [pc, #8]	; (400810 <PIOD_Handler+0x10>)
  400808:	4b02      	ldr	r3, [pc, #8]	; (400814 <PIOD_Handler+0x14>)
  40080a:	4798      	blx	r3
}
  40080c:	bf00      	nop
  40080e:	bd80      	pop	{r7, pc}
  400810:	400e1400 	.word	0x400e1400
  400814:	00400705 	.word	0x00400705

00400818 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400818:	b580      	push	{r7, lr}
  40081a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40081c:	2111      	movs	r1, #17
  40081e:	4802      	ldr	r0, [pc, #8]	; (400828 <PIOE_Handler+0x10>)
  400820:	4b02      	ldr	r3, [pc, #8]	; (40082c <PIOE_Handler+0x14>)
  400822:	4798      	blx	r3
}
  400824:	bf00      	nop
  400826:	bd80      	pop	{r7, pc}
  400828:	400e1600 	.word	0x400e1600
  40082c:	00400705 	.word	0x00400705

00400830 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400830:	b480      	push	{r7}
  400832:	b083      	sub	sp, #12
  400834:	af00      	add	r7, sp, #0
  400836:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400838:	687b      	ldr	r3, [r7, #4]
  40083a:	3b01      	subs	r3, #1
  40083c:	2b03      	cmp	r3, #3
  40083e:	d81a      	bhi.n	400876 <pmc_mck_set_division+0x46>
  400840:	a201      	add	r2, pc, #4	; (adr r2, 400848 <pmc_mck_set_division+0x18>)
  400842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400846:	bf00      	nop
  400848:	00400859 	.word	0x00400859
  40084c:	0040085f 	.word	0x0040085f
  400850:	00400867 	.word	0x00400867
  400854:	0040086f 	.word	0x0040086f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400858:	2300      	movs	r3, #0
  40085a:	607b      	str	r3, [r7, #4]
			break;
  40085c:	e00e      	b.n	40087c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40085e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400862:	607b      	str	r3, [r7, #4]
			break;
  400864:	e00a      	b.n	40087c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400866:	f44f 7340 	mov.w	r3, #768	; 0x300
  40086a:	607b      	str	r3, [r7, #4]
			break;
  40086c:	e006      	b.n	40087c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40086e:	f44f 7300 	mov.w	r3, #512	; 0x200
  400872:	607b      	str	r3, [r7, #4]
			break;
  400874:	e002      	b.n	40087c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400876:	2300      	movs	r3, #0
  400878:	607b      	str	r3, [r7, #4]
			break;
  40087a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40087c:	490a      	ldr	r1, [pc, #40]	; (4008a8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40087e:	4b0a      	ldr	r3, [pc, #40]	; (4008a8 <pmc_mck_set_division+0x78>)
  400880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400886:	687b      	ldr	r3, [r7, #4]
  400888:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40088a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40088c:	bf00      	nop
  40088e:	4b06      	ldr	r3, [pc, #24]	; (4008a8 <pmc_mck_set_division+0x78>)
  400890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400892:	f003 0308 	and.w	r3, r3, #8
  400896:	2b00      	cmp	r3, #0
  400898:	d0f9      	beq.n	40088e <pmc_mck_set_division+0x5e>
}
  40089a:	bf00      	nop
  40089c:	370c      	adds	r7, #12
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	400e0600 	.word	0x400e0600

004008ac <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b085      	sub	sp, #20
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008b4:	491d      	ldr	r1, [pc, #116]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  4008b6:	4b1d      	ldr	r3, [pc, #116]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  4008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4008be:	687b      	ldr	r3, [r7, #4]
  4008c0:	4313      	orrs	r3, r2
  4008c2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008c8:	60fb      	str	r3, [r7, #12]
  4008ca:	e007      	b.n	4008dc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	d101      	bne.n	4008d6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4008d2:	2301      	movs	r3, #1
  4008d4:	e023      	b.n	40091e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4008d6:	68fb      	ldr	r3, [r7, #12]
  4008d8:	3b01      	subs	r3, #1
  4008da:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008dc:	4b13      	ldr	r3, [pc, #76]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  4008de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008e0:	f003 0308 	and.w	r3, r3, #8
  4008e4:	2b00      	cmp	r3, #0
  4008e6:	d0f1      	beq.n	4008cc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4008e8:	4a10      	ldr	r2, [pc, #64]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  4008ea:	4b10      	ldr	r3, [pc, #64]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  4008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4008ee:	f023 0303 	bic.w	r3, r3, #3
  4008f2:	f043 0302 	orr.w	r3, r3, #2
  4008f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008fc:	60fb      	str	r3, [r7, #12]
  4008fe:	e007      	b.n	400910 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400900:	68fb      	ldr	r3, [r7, #12]
  400902:	2b00      	cmp	r3, #0
  400904:	d101      	bne.n	40090a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400906:	2301      	movs	r3, #1
  400908:	e009      	b.n	40091e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40090a:	68fb      	ldr	r3, [r7, #12]
  40090c:	3b01      	subs	r3, #1
  40090e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400910:	4b06      	ldr	r3, [pc, #24]	; (40092c <pmc_switch_mck_to_pllack+0x80>)
  400912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400914:	f003 0308 	and.w	r3, r3, #8
  400918:	2b00      	cmp	r3, #0
  40091a:	d0f1      	beq.n	400900 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40091c:	2300      	movs	r3, #0
}
  40091e:	4618      	mov	r0, r3
  400920:	3714      	adds	r7, #20
  400922:	46bd      	mov	sp, r7
  400924:	f85d 7b04 	ldr.w	r7, [sp], #4
  400928:	4770      	bx	lr
  40092a:	bf00      	nop
  40092c:	400e0600 	.word	0x400e0600

00400930 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400930:	b480      	push	{r7}
  400932:	b083      	sub	sp, #12
  400934:	af00      	add	r7, sp, #0
  400936:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400938:	687b      	ldr	r3, [r7, #4]
  40093a:	2b01      	cmp	r3, #1
  40093c:	d105      	bne.n	40094a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40093e:	4907      	ldr	r1, [pc, #28]	; (40095c <pmc_switch_sclk_to_32kxtal+0x2c>)
  400940:	4b06      	ldr	r3, [pc, #24]	; (40095c <pmc_switch_sclk_to_32kxtal+0x2c>)
  400942:	689a      	ldr	r2, [r3, #8]
  400944:	4b06      	ldr	r3, [pc, #24]	; (400960 <pmc_switch_sclk_to_32kxtal+0x30>)
  400946:	4313      	orrs	r3, r2
  400948:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40094a:	4b04      	ldr	r3, [pc, #16]	; (40095c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40094c:	4a05      	ldr	r2, [pc, #20]	; (400964 <pmc_switch_sclk_to_32kxtal+0x34>)
  40094e:	601a      	str	r2, [r3, #0]
}
  400950:	bf00      	nop
  400952:	370c      	adds	r7, #12
  400954:	46bd      	mov	sp, r7
  400956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40095a:	4770      	bx	lr
  40095c:	400e1810 	.word	0x400e1810
  400960:	a5100000 	.word	0xa5100000
  400964:	a5000008 	.word	0xa5000008

00400968 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400968:	b480      	push	{r7}
  40096a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40096c:	4b09      	ldr	r3, [pc, #36]	; (400994 <pmc_osc_is_ready_32kxtal+0x2c>)
  40096e:	695b      	ldr	r3, [r3, #20]
  400970:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400974:	2b00      	cmp	r3, #0
  400976:	d007      	beq.n	400988 <pmc_osc_is_ready_32kxtal+0x20>
  400978:	4b07      	ldr	r3, [pc, #28]	; (400998 <pmc_osc_is_ready_32kxtal+0x30>)
  40097a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40097c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400980:	2b00      	cmp	r3, #0
  400982:	d001      	beq.n	400988 <pmc_osc_is_ready_32kxtal+0x20>
  400984:	2301      	movs	r3, #1
  400986:	e000      	b.n	40098a <pmc_osc_is_ready_32kxtal+0x22>
  400988:	2300      	movs	r3, #0
}
  40098a:	4618      	mov	r0, r3
  40098c:	46bd      	mov	sp, r7
  40098e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400992:	4770      	bx	lr
  400994:	400e1810 	.word	0x400e1810
  400998:	400e0600 	.word	0x400e0600

0040099c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40099c:	b480      	push	{r7}
  40099e:	b083      	sub	sp, #12
  4009a0:	af00      	add	r7, sp, #0
  4009a2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4009a4:	4915      	ldr	r1, [pc, #84]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009a6:	4b15      	ldr	r3, [pc, #84]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009a8:	6a1a      	ldr	r2, [r3, #32]
  4009aa:	4b15      	ldr	r3, [pc, #84]	; (400a00 <pmc_switch_mainck_to_fastrc+0x64>)
  4009ac:	4313      	orrs	r3, r2
  4009ae:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009b0:	bf00      	nop
  4009b2:	4b12      	ldr	r3, [pc, #72]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4009ba:	2b00      	cmp	r3, #0
  4009bc:	d0f9      	beq.n	4009b2 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4009be:	490f      	ldr	r1, [pc, #60]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009c0:	4b0e      	ldr	r3, [pc, #56]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009c2:	6a1a      	ldr	r2, [r3, #32]
  4009c4:	4b0f      	ldr	r3, [pc, #60]	; (400a04 <pmc_switch_mainck_to_fastrc+0x68>)
  4009c6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4009c8:	687a      	ldr	r2, [r7, #4]
  4009ca:	4313      	orrs	r3, r2
  4009cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4009d0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009d2:	bf00      	nop
  4009d4:	4b09      	ldr	r3, [pc, #36]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4009d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4009dc:	2b00      	cmp	r3, #0
  4009de:	d0f9      	beq.n	4009d4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009e0:	4906      	ldr	r1, [pc, #24]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009e2:	4b06      	ldr	r3, [pc, #24]	; (4009fc <pmc_switch_mainck_to_fastrc+0x60>)
  4009e4:	6a1a      	ldr	r2, [r3, #32]
  4009e6:	4b08      	ldr	r3, [pc, #32]	; (400a08 <pmc_switch_mainck_to_fastrc+0x6c>)
  4009e8:	4013      	ands	r3, r2
  4009ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009ee:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4009f0:	bf00      	nop
  4009f2:	370c      	adds	r7, #12
  4009f4:	46bd      	mov	sp, r7
  4009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009fa:	4770      	bx	lr
  4009fc:	400e0600 	.word	0x400e0600
  400a00:	00370008 	.word	0x00370008
  400a04:	ffc8ff8f 	.word	0xffc8ff8f
  400a08:	fec8ffff 	.word	0xfec8ffff

00400a0c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400a0c:	b480      	push	{r7}
  400a0e:	b083      	sub	sp, #12
  400a10:	af00      	add	r7, sp, #0
  400a12:	6078      	str	r0, [r7, #4]
  400a14:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a16:	687b      	ldr	r3, [r7, #4]
  400a18:	2b00      	cmp	r3, #0
  400a1a:	d008      	beq.n	400a2e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a1c:	4913      	ldr	r1, [pc, #76]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a1e:	4b13      	ldr	r3, [pc, #76]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a20:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a22:	4a13      	ldr	r2, [pc, #76]	; (400a70 <pmc_switch_mainck_to_xtal+0x64>)
  400a24:	401a      	ands	r2, r3
  400a26:	4b13      	ldr	r3, [pc, #76]	; (400a74 <pmc_switch_mainck_to_xtal+0x68>)
  400a28:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a2a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400a2c:	e018      	b.n	400a60 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a2e:	490f      	ldr	r1, [pc, #60]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a30:	4b0e      	ldr	r3, [pc, #56]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a32:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a34:	4b10      	ldr	r3, [pc, #64]	; (400a78 <pmc_switch_mainck_to_xtal+0x6c>)
  400a36:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a38:	683a      	ldr	r2, [r7, #0]
  400a3a:	0212      	lsls	r2, r2, #8
  400a3c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a3e:	431a      	orrs	r2, r3
  400a40:	4b0e      	ldr	r3, [pc, #56]	; (400a7c <pmc_switch_mainck_to_xtal+0x70>)
  400a42:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a44:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a46:	bf00      	nop
  400a48:	4b08      	ldr	r3, [pc, #32]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a4c:	f003 0301 	and.w	r3, r3, #1
  400a50:	2b00      	cmp	r3, #0
  400a52:	d0f9      	beq.n	400a48 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a54:	4905      	ldr	r1, [pc, #20]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a56:	4b05      	ldr	r3, [pc, #20]	; (400a6c <pmc_switch_mainck_to_xtal+0x60>)
  400a58:	6a1a      	ldr	r2, [r3, #32]
  400a5a:	4b09      	ldr	r3, [pc, #36]	; (400a80 <pmc_switch_mainck_to_xtal+0x74>)
  400a5c:	4313      	orrs	r3, r2
  400a5e:	620b      	str	r3, [r1, #32]
}
  400a60:	bf00      	nop
  400a62:	370c      	adds	r7, #12
  400a64:	46bd      	mov	sp, r7
  400a66:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a6a:	4770      	bx	lr
  400a6c:	400e0600 	.word	0x400e0600
  400a70:	fec8fffc 	.word	0xfec8fffc
  400a74:	01370002 	.word	0x01370002
  400a78:	ffc8fffc 	.word	0xffc8fffc
  400a7c:	00370001 	.word	0x00370001
  400a80:	01370000 	.word	0x01370000

00400a84 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400a84:	b480      	push	{r7}
  400a86:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <pmc_osc_is_ready_mainck+0x18>)
  400a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400a90:	4618      	mov	r0, r3
  400a92:	46bd      	mov	sp, r7
  400a94:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a98:	4770      	bx	lr
  400a9a:	bf00      	nop
  400a9c:	400e0600 	.word	0x400e0600

00400aa0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400aa0:	b480      	push	{r7}
  400aa2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400aa4:	4b04      	ldr	r3, [pc, #16]	; (400ab8 <pmc_disable_pllack+0x18>)
  400aa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400aaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400aac:	bf00      	nop
  400aae:	46bd      	mov	sp, r7
  400ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ab4:	4770      	bx	lr
  400ab6:	bf00      	nop
  400ab8:	400e0600 	.word	0x400e0600

00400abc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400abc:	b480      	push	{r7}
  400abe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ac0:	4b04      	ldr	r3, [pc, #16]	; (400ad4 <pmc_is_locked_pllack+0x18>)
  400ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ac4:	f003 0302 	and.w	r3, r3, #2
}
  400ac8:	4618      	mov	r0, r3
  400aca:	46bd      	mov	sp, r7
  400acc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ad0:	4770      	bx	lr
  400ad2:	bf00      	nop
  400ad4:	400e0600 	.word	0x400e0600

00400ad8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400ad8:	b480      	push	{r7}
  400ada:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400adc:	4b04      	ldr	r3, [pc, #16]	; (400af0 <pmc_is_locked_upll+0x18>)
  400ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400ae4:	4618      	mov	r0, r3
  400ae6:	46bd      	mov	sp, r7
  400ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aec:	4770      	bx	lr
  400aee:	bf00      	nop
  400af0:	400e0600 	.word	0x400e0600

00400af4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400af4:	b480      	push	{r7}
  400af6:	b083      	sub	sp, #12
  400af8:	af00      	add	r7, sp, #0
  400afa:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400afc:	687b      	ldr	r3, [r7, #4]
  400afe:	2b3f      	cmp	r3, #63	; 0x3f
  400b00:	d901      	bls.n	400b06 <pmc_enable_periph_clk+0x12>
		return 1;
  400b02:	2301      	movs	r3, #1
  400b04:	e02f      	b.n	400b66 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2b1f      	cmp	r3, #31
  400b0a:	d813      	bhi.n	400b34 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b0c:	4b19      	ldr	r3, [pc, #100]	; (400b74 <pmc_enable_periph_clk+0x80>)
  400b0e:	699a      	ldr	r2, [r3, #24]
  400b10:	2101      	movs	r1, #1
  400b12:	687b      	ldr	r3, [r7, #4]
  400b14:	fa01 f303 	lsl.w	r3, r1, r3
  400b18:	401a      	ands	r2, r3
  400b1a:	2101      	movs	r1, #1
  400b1c:	687b      	ldr	r3, [r7, #4]
  400b1e:	fa01 f303 	lsl.w	r3, r1, r3
  400b22:	429a      	cmp	r2, r3
  400b24:	d01e      	beq.n	400b64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b26:	4a13      	ldr	r2, [pc, #76]	; (400b74 <pmc_enable_periph_clk+0x80>)
  400b28:	2101      	movs	r1, #1
  400b2a:	687b      	ldr	r3, [r7, #4]
  400b2c:	fa01 f303 	lsl.w	r3, r1, r3
  400b30:	6113      	str	r3, [r2, #16]
  400b32:	e017      	b.n	400b64 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400b34:	687b      	ldr	r3, [r7, #4]
  400b36:	3b20      	subs	r3, #32
  400b38:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b3a:	4b0e      	ldr	r3, [pc, #56]	; (400b74 <pmc_enable_periph_clk+0x80>)
  400b3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400b40:	2101      	movs	r1, #1
  400b42:	687b      	ldr	r3, [r7, #4]
  400b44:	fa01 f303 	lsl.w	r3, r1, r3
  400b48:	401a      	ands	r2, r3
  400b4a:	2101      	movs	r1, #1
  400b4c:	687b      	ldr	r3, [r7, #4]
  400b4e:	fa01 f303 	lsl.w	r3, r1, r3
  400b52:	429a      	cmp	r2, r3
  400b54:	d006      	beq.n	400b64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b56:	4a07      	ldr	r2, [pc, #28]	; (400b74 <pmc_enable_periph_clk+0x80>)
  400b58:	2101      	movs	r1, #1
  400b5a:	687b      	ldr	r3, [r7, #4]
  400b5c:	fa01 f303 	lsl.w	r3, r1, r3
  400b60:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b64:	2300      	movs	r3, #0
}
  400b66:	4618      	mov	r0, r3
  400b68:	370c      	adds	r7, #12
  400b6a:	46bd      	mov	sp, r7
  400b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b70:	4770      	bx	lr
  400b72:	bf00      	nop
  400b74:	400e0600 	.word	0x400e0600

00400b78 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400b78:	b480      	push	{r7}
  400b7a:	b083      	sub	sp, #12
  400b7c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b7e:	f3ef 8310 	mrs	r3, PRIMASK
  400b82:	607b      	str	r3, [r7, #4]
  return(result);
  400b84:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b86:	2b00      	cmp	r3, #0
  400b88:	bf0c      	ite	eq
  400b8a:	2301      	moveq	r3, #1
  400b8c:	2300      	movne	r3, #0
  400b8e:	b2db      	uxtb	r3, r3
  400b90:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400b92:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400b94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b98:	4b04      	ldr	r3, [pc, #16]	; (400bac <cpu_irq_save+0x34>)
  400b9a:	2200      	movs	r2, #0
  400b9c:	701a      	strb	r2, [r3, #0]
	return flags;
  400b9e:	683b      	ldr	r3, [r7, #0]
}
  400ba0:	4618      	mov	r0, r3
  400ba2:	370c      	adds	r7, #12
  400ba4:	46bd      	mov	sp, r7
  400ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400baa:	4770      	bx	lr
  400bac:	2040000a 	.word	0x2040000a

00400bb0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400bb0:	b480      	push	{r7}
  400bb2:	b083      	sub	sp, #12
  400bb4:	af00      	add	r7, sp, #0
  400bb6:	6078      	str	r0, [r7, #4]
	return (flags);
  400bb8:	687b      	ldr	r3, [r7, #4]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	bf14      	ite	ne
  400bbe:	2301      	movne	r3, #1
  400bc0:	2300      	moveq	r3, #0
  400bc2:	b2db      	uxtb	r3, r3
}
  400bc4:	4618      	mov	r0, r3
  400bc6:	370c      	adds	r7, #12
  400bc8:	46bd      	mov	sp, r7
  400bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bce:	4770      	bx	lr

00400bd0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400bd0:	b580      	push	{r7, lr}
  400bd2:	b082      	sub	sp, #8
  400bd4:	af00      	add	r7, sp, #0
  400bd6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400bd8:	6878      	ldr	r0, [r7, #4]
  400bda:	4b07      	ldr	r3, [pc, #28]	; (400bf8 <cpu_irq_restore+0x28>)
  400bdc:	4798      	blx	r3
  400bde:	4603      	mov	r3, r0
  400be0:	2b00      	cmp	r3, #0
  400be2:	d005      	beq.n	400bf0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400be4:	4b05      	ldr	r3, [pc, #20]	; (400bfc <cpu_irq_restore+0x2c>)
  400be6:	2201      	movs	r2, #1
  400be8:	701a      	strb	r2, [r3, #0]
  400bea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bee:	b662      	cpsie	i
}
  400bf0:	bf00      	nop
  400bf2:	3708      	adds	r7, #8
  400bf4:	46bd      	mov	sp, r7
  400bf6:	bd80      	pop	{r7, pc}
  400bf8:	00400bb1 	.word	0x00400bb1
  400bfc:	2040000a 	.word	0x2040000a

00400c00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400c00:	b580      	push	{r7, lr}
  400c02:	b084      	sub	sp, #16
  400c04:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400c06:	4b1e      	ldr	r3, [pc, #120]	; (400c80 <Reset_Handler+0x80>)
  400c08:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400c0a:	4b1e      	ldr	r3, [pc, #120]	; (400c84 <Reset_Handler+0x84>)
  400c0c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400c0e:	68fa      	ldr	r2, [r7, #12]
  400c10:	68bb      	ldr	r3, [r7, #8]
  400c12:	429a      	cmp	r2, r3
  400c14:	d00c      	beq.n	400c30 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400c16:	e007      	b.n	400c28 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400c18:	68bb      	ldr	r3, [r7, #8]
  400c1a:	1d1a      	adds	r2, r3, #4
  400c1c:	60ba      	str	r2, [r7, #8]
  400c1e:	68fa      	ldr	r2, [r7, #12]
  400c20:	1d11      	adds	r1, r2, #4
  400c22:	60f9      	str	r1, [r7, #12]
  400c24:	6812      	ldr	r2, [r2, #0]
  400c26:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400c28:	68bb      	ldr	r3, [r7, #8]
  400c2a:	4a17      	ldr	r2, [pc, #92]	; (400c88 <Reset_Handler+0x88>)
  400c2c:	4293      	cmp	r3, r2
  400c2e:	d3f3      	bcc.n	400c18 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400c30:	4b16      	ldr	r3, [pc, #88]	; (400c8c <Reset_Handler+0x8c>)
  400c32:	60bb      	str	r3, [r7, #8]
  400c34:	e004      	b.n	400c40 <Reset_Handler+0x40>
                *pDest++ = 0;
  400c36:	68bb      	ldr	r3, [r7, #8]
  400c38:	1d1a      	adds	r2, r3, #4
  400c3a:	60ba      	str	r2, [r7, #8]
  400c3c:	2200      	movs	r2, #0
  400c3e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400c40:	68bb      	ldr	r3, [r7, #8]
  400c42:	4a13      	ldr	r2, [pc, #76]	; (400c90 <Reset_Handler+0x90>)
  400c44:	4293      	cmp	r3, r2
  400c46:	d3f6      	bcc.n	400c36 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400c48:	4b12      	ldr	r3, [pc, #72]	; (400c94 <Reset_Handler+0x94>)
  400c4a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400c4c:	4a12      	ldr	r2, [pc, #72]	; (400c98 <Reset_Handler+0x98>)
  400c4e:	68fb      	ldr	r3, [r7, #12]
  400c50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400c54:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400c56:	4b11      	ldr	r3, [pc, #68]	; (400c9c <Reset_Handler+0x9c>)
  400c58:	4798      	blx	r3
  400c5a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400c5c:	4a10      	ldr	r2, [pc, #64]	; (400ca0 <Reset_Handler+0xa0>)
  400c5e:	4b10      	ldr	r3, [pc, #64]	; (400ca0 <Reset_Handler+0xa0>)
  400c60:	681b      	ldr	r3, [r3, #0]
  400c62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400c66:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400c68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400c6c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400c70:	6878      	ldr	r0, [r7, #4]
  400c72:	4b0c      	ldr	r3, [pc, #48]	; (400ca4 <Reset_Handler+0xa4>)
  400c74:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400c76:	4b0c      	ldr	r3, [pc, #48]	; (400ca8 <Reset_Handler+0xa8>)
  400c78:	4798      	blx	r3

        /* Branch to main function */
        main();
  400c7a:	4b0c      	ldr	r3, [pc, #48]	; (400cac <Reset_Handler+0xac>)
  400c7c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400c7e:	e7fe      	b.n	400c7e <Reset_Handler+0x7e>
  400c80:	0040217c 	.word	0x0040217c
  400c84:	20400000 	.word	0x20400000
  400c88:	2040100c 	.word	0x2040100c
  400c8c:	2040100c 	.word	0x2040100c
  400c90:	204010bc 	.word	0x204010bc
  400c94:	00400000 	.word	0x00400000
  400c98:	e000ed00 	.word	0xe000ed00
  400c9c:	00400b79 	.word	0x00400b79
  400ca0:	e000ed88 	.word	0xe000ed88
  400ca4:	00400bd1 	.word	0x00400bd1
  400ca8:	00401fdd 	.word	0x00401fdd
  400cac:	00401309 	.word	0x00401309

00400cb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400cb0:	b480      	push	{r7}
  400cb2:	af00      	add	r7, sp, #0
        while (1) {
  400cb4:	e7fe      	b.n	400cb4 <Dummy_Handler+0x4>
	...

00400cb8 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400cb8:	b480      	push	{r7}
  400cba:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400cbc:	4b52      	ldr	r3, [pc, #328]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cc0:	f003 0303 	and.w	r3, r3, #3
  400cc4:	2b01      	cmp	r3, #1
  400cc6:	d014      	beq.n	400cf2 <SystemCoreClockUpdate+0x3a>
  400cc8:	2b01      	cmp	r3, #1
  400cca:	d302      	bcc.n	400cd2 <SystemCoreClockUpdate+0x1a>
  400ccc:	2b02      	cmp	r3, #2
  400cce:	d038      	beq.n	400d42 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400cd0:	e07a      	b.n	400dc8 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400cd2:	4b4e      	ldr	r3, [pc, #312]	; (400e0c <SystemCoreClockUpdate+0x154>)
  400cd4:	695b      	ldr	r3, [r3, #20]
  400cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400cda:	2b00      	cmp	r3, #0
  400cdc:	d004      	beq.n	400ce8 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400cde:	4b4c      	ldr	r3, [pc, #304]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ce4:	601a      	str	r2, [r3, #0]
    break;
  400ce6:	e06f      	b.n	400dc8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ce8:	4b49      	ldr	r3, [pc, #292]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400cea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400cee:	601a      	str	r2, [r3, #0]
    break;
  400cf0:	e06a      	b.n	400dc8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400cf2:	4b45      	ldr	r3, [pc, #276]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400cf4:	6a1b      	ldr	r3, [r3, #32]
  400cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400cfa:	2b00      	cmp	r3, #0
  400cfc:	d003      	beq.n	400d06 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400cfe:	4b44      	ldr	r3, [pc, #272]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d00:	4a44      	ldr	r2, [pc, #272]	; (400e14 <SystemCoreClockUpdate+0x15c>)
  400d02:	601a      	str	r2, [r3, #0]
    break;
  400d04:	e060      	b.n	400dc8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d06:	4b42      	ldr	r3, [pc, #264]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d08:	4a43      	ldr	r2, [pc, #268]	; (400e18 <SystemCoreClockUpdate+0x160>)
  400d0a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400d0c:	4b3e      	ldr	r3, [pc, #248]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400d0e:	6a1b      	ldr	r3, [r3, #32]
  400d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d14:	2b10      	cmp	r3, #16
  400d16:	d004      	beq.n	400d22 <SystemCoreClockUpdate+0x6a>
  400d18:	2b20      	cmp	r3, #32
  400d1a:	d008      	beq.n	400d2e <SystemCoreClockUpdate+0x76>
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d00e      	beq.n	400d3e <SystemCoreClockUpdate+0x86>
          break;
  400d20:	e00e      	b.n	400d40 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  400d22:	4b3b      	ldr	r3, [pc, #236]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d24:	681b      	ldr	r3, [r3, #0]
  400d26:	005b      	lsls	r3, r3, #1
  400d28:	4a39      	ldr	r2, [pc, #228]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d2a:	6013      	str	r3, [r2, #0]
          break;
  400d2c:	e008      	b.n	400d40 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  400d2e:	4b38      	ldr	r3, [pc, #224]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d30:	681a      	ldr	r2, [r3, #0]
  400d32:	4613      	mov	r3, r2
  400d34:	005b      	lsls	r3, r3, #1
  400d36:	4413      	add	r3, r2
  400d38:	4a35      	ldr	r2, [pc, #212]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d3a:	6013      	str	r3, [r2, #0]
          break;
  400d3c:	e000      	b.n	400d40 <SystemCoreClockUpdate+0x88>
          break;
  400d3e:	bf00      	nop
    break;
  400d40:	e042      	b.n	400dc8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400d42:	4b31      	ldr	r3, [pc, #196]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400d44:	6a1b      	ldr	r3, [r3, #32]
  400d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400d4a:	2b00      	cmp	r3, #0
  400d4c:	d003      	beq.n	400d56 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400d4e:	4b30      	ldr	r3, [pc, #192]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d50:	4a30      	ldr	r2, [pc, #192]	; (400e14 <SystemCoreClockUpdate+0x15c>)
  400d52:	601a      	str	r2, [r3, #0]
  400d54:	e01c      	b.n	400d90 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d56:	4b2e      	ldr	r3, [pc, #184]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d58:	4a2f      	ldr	r2, [pc, #188]	; (400e18 <SystemCoreClockUpdate+0x160>)
  400d5a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400d5c:	4b2a      	ldr	r3, [pc, #168]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400d5e:	6a1b      	ldr	r3, [r3, #32]
  400d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d64:	2b10      	cmp	r3, #16
  400d66:	d004      	beq.n	400d72 <SystemCoreClockUpdate+0xba>
  400d68:	2b20      	cmp	r3, #32
  400d6a:	d008      	beq.n	400d7e <SystemCoreClockUpdate+0xc6>
  400d6c:	2b00      	cmp	r3, #0
  400d6e:	d00e      	beq.n	400d8e <SystemCoreClockUpdate+0xd6>
          break;
  400d70:	e00e      	b.n	400d90 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  400d72:	4b27      	ldr	r3, [pc, #156]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d74:	681b      	ldr	r3, [r3, #0]
  400d76:	005b      	lsls	r3, r3, #1
  400d78:	4a25      	ldr	r2, [pc, #148]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d7a:	6013      	str	r3, [r2, #0]
          break;
  400d7c:	e008      	b.n	400d90 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  400d7e:	4b24      	ldr	r3, [pc, #144]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d80:	681a      	ldr	r2, [r3, #0]
  400d82:	4613      	mov	r3, r2
  400d84:	005b      	lsls	r3, r3, #1
  400d86:	4413      	add	r3, r2
  400d88:	4a21      	ldr	r2, [pc, #132]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400d8a:	6013      	str	r3, [r2, #0]
          break;
  400d8c:	e000      	b.n	400d90 <SystemCoreClockUpdate+0xd8>
          break;
  400d8e:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400d90:	4b1d      	ldr	r3, [pc, #116]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d94:	f003 0303 	and.w	r3, r3, #3
  400d98:	2b02      	cmp	r3, #2
  400d9a:	d114      	bne.n	400dc6 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400d9c:	4b1a      	ldr	r3, [pc, #104]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400da0:	0c1b      	lsrs	r3, r3, #16
  400da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400da6:	3301      	adds	r3, #1
  400da8:	4a19      	ldr	r2, [pc, #100]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400daa:	6812      	ldr	r2, [r2, #0]
  400dac:	fb02 f303 	mul.w	r3, r2, r3
  400db0:	4a17      	ldr	r2, [pc, #92]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400db2:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400db4:	4b14      	ldr	r3, [pc, #80]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400db8:	b2db      	uxtb	r3, r3
  400dba:	4a15      	ldr	r2, [pc, #84]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400dbc:	6812      	ldr	r2, [r2, #0]
  400dbe:	fbb2 f3f3 	udiv	r3, r2, r3
  400dc2:	4a13      	ldr	r2, [pc, #76]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400dc4:	6013      	str	r3, [r2, #0]
    break;
  400dc6:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400dc8:	4b0f      	ldr	r3, [pc, #60]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dd0:	2b70      	cmp	r3, #112	; 0x70
  400dd2:	d108      	bne.n	400de6 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  400dd4:	4b0e      	ldr	r3, [pc, #56]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400dd6:	681b      	ldr	r3, [r3, #0]
  400dd8:	4a10      	ldr	r2, [pc, #64]	; (400e1c <SystemCoreClockUpdate+0x164>)
  400dda:	fba2 2303 	umull	r2, r3, r2, r3
  400dde:	085b      	lsrs	r3, r3, #1
  400de0:	4a0b      	ldr	r2, [pc, #44]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400de2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  400de4:	e00a      	b.n	400dfc <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400de6:	4b08      	ldr	r3, [pc, #32]	; (400e08 <SystemCoreClockUpdate+0x150>)
  400de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dea:	091b      	lsrs	r3, r3, #4
  400dec:	f003 0307 	and.w	r3, r3, #7
  400df0:	4a07      	ldr	r2, [pc, #28]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400df2:	6812      	ldr	r2, [r2, #0]
  400df4:	fa22 f303 	lsr.w	r3, r2, r3
  400df8:	4a05      	ldr	r2, [pc, #20]	; (400e10 <SystemCoreClockUpdate+0x158>)
  400dfa:	6013      	str	r3, [r2, #0]
}
  400dfc:	bf00      	nop
  400dfe:	46bd      	mov	sp, r7
  400e00:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e04:	4770      	bx	lr
  400e06:	bf00      	nop
  400e08:	400e0600 	.word	0x400e0600
  400e0c:	400e1810 	.word	0x400e1810
  400e10:	2040000c 	.word	0x2040000c
  400e14:	00b71b00 	.word	0x00b71b00
  400e18:	003d0900 	.word	0x003d0900
  400e1c:	aaaaaaab 	.word	0xaaaaaaab

00400e20 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  400e20:	b480      	push	{r7}
  400e22:	b083      	sub	sp, #12
  400e24:	af00      	add	r7, sp, #0
  400e26:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400e28:	687b      	ldr	r3, [r7, #4]
  400e2a:	4a19      	ldr	r2, [pc, #100]	; (400e90 <system_init_flash+0x70>)
  400e2c:	4293      	cmp	r3, r2
  400e2e:	d804      	bhi.n	400e3a <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400e30:	4b18      	ldr	r3, [pc, #96]	; (400e94 <system_init_flash+0x74>)
  400e32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400e36:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  400e38:	e023      	b.n	400e82 <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	4a16      	ldr	r2, [pc, #88]	; (400e98 <system_init_flash+0x78>)
  400e3e:	4293      	cmp	r3, r2
  400e40:	d803      	bhi.n	400e4a <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400e42:	4b14      	ldr	r3, [pc, #80]	; (400e94 <system_init_flash+0x74>)
  400e44:	4a15      	ldr	r2, [pc, #84]	; (400e9c <system_init_flash+0x7c>)
  400e46:	601a      	str	r2, [r3, #0]
}
  400e48:	e01b      	b.n	400e82 <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e4a:	687b      	ldr	r3, [r7, #4]
  400e4c:	4a14      	ldr	r2, [pc, #80]	; (400ea0 <system_init_flash+0x80>)
  400e4e:	4293      	cmp	r3, r2
  400e50:	d803      	bhi.n	400e5a <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400e52:	4b10      	ldr	r3, [pc, #64]	; (400e94 <system_init_flash+0x74>)
  400e54:	4a13      	ldr	r2, [pc, #76]	; (400ea4 <system_init_flash+0x84>)
  400e56:	601a      	str	r2, [r3, #0]
}
  400e58:	e013      	b.n	400e82 <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e5a:	687b      	ldr	r3, [r7, #4]
  400e5c:	4a12      	ldr	r2, [pc, #72]	; (400ea8 <system_init_flash+0x88>)
  400e5e:	4293      	cmp	r3, r2
  400e60:	d803      	bhi.n	400e6a <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e62:	4b0c      	ldr	r3, [pc, #48]	; (400e94 <system_init_flash+0x74>)
  400e64:	4a11      	ldr	r2, [pc, #68]	; (400eac <system_init_flash+0x8c>)
  400e66:	601a      	str	r2, [r3, #0]
}
  400e68:	e00b      	b.n	400e82 <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e6a:	687b      	ldr	r3, [r7, #4]
  400e6c:	4a10      	ldr	r2, [pc, #64]	; (400eb0 <system_init_flash+0x90>)
  400e6e:	4293      	cmp	r3, r2
  400e70:	d804      	bhi.n	400e7c <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400e72:	4b08      	ldr	r3, [pc, #32]	; (400e94 <system_init_flash+0x74>)
  400e74:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400e78:	601a      	str	r2, [r3, #0]
}
  400e7a:	e002      	b.n	400e82 <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e7c:	4b05      	ldr	r3, [pc, #20]	; (400e94 <system_init_flash+0x74>)
  400e7e:	4a0d      	ldr	r2, [pc, #52]	; (400eb4 <system_init_flash+0x94>)
  400e80:	601a      	str	r2, [r3, #0]
}
  400e82:	bf00      	nop
  400e84:	370c      	adds	r7, #12
  400e86:	46bd      	mov	sp, r7
  400e88:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop
  400e90:	01312cff 	.word	0x01312cff
  400e94:	400e0c00 	.word	0x400e0c00
  400e98:	026259ff 	.word	0x026259ff
  400e9c:	04000100 	.word	0x04000100
  400ea0:	039386ff 	.word	0x039386ff
  400ea4:	04000200 	.word	0x04000200
  400ea8:	04c4b3ff 	.word	0x04c4b3ff
  400eac:	04000300 	.word	0x04000300
  400eb0:	05f5e0ff 	.word	0x05f5e0ff
  400eb4:	04000500 	.word	0x04000500

00400eb8 <osc_get_rate>:
{
  400eb8:	b480      	push	{r7}
  400eba:	b083      	sub	sp, #12
  400ebc:	af00      	add	r7, sp, #0
  400ebe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	2b07      	cmp	r3, #7
  400ec4:	d825      	bhi.n	400f12 <osc_get_rate+0x5a>
  400ec6:	a201      	add	r2, pc, #4	; (adr r2, 400ecc <osc_get_rate+0x14>)
  400ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ecc:	00400eed 	.word	0x00400eed
  400ed0:	00400ef3 	.word	0x00400ef3
  400ed4:	00400ef9 	.word	0x00400ef9
  400ed8:	00400eff 	.word	0x00400eff
  400edc:	00400f03 	.word	0x00400f03
  400ee0:	00400f07 	.word	0x00400f07
  400ee4:	00400f0b 	.word	0x00400f0b
  400ee8:	00400f0f 	.word	0x00400f0f
		return OSC_SLCK_32K_RC_HZ;
  400eec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ef0:	e010      	b.n	400f14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ef6:	e00d      	b.n	400f14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400efc:	e00a      	b.n	400f14 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400efe:	4b08      	ldr	r3, [pc, #32]	; (400f20 <osc_get_rate+0x68>)
  400f00:	e008      	b.n	400f14 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400f02:	4b08      	ldr	r3, [pc, #32]	; (400f24 <osc_get_rate+0x6c>)
  400f04:	e006      	b.n	400f14 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400f06:	4b08      	ldr	r3, [pc, #32]	; (400f28 <osc_get_rate+0x70>)
  400f08:	e004      	b.n	400f14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400f0a:	4b07      	ldr	r3, [pc, #28]	; (400f28 <osc_get_rate+0x70>)
  400f0c:	e002      	b.n	400f14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400f0e:	4b06      	ldr	r3, [pc, #24]	; (400f28 <osc_get_rate+0x70>)
  400f10:	e000      	b.n	400f14 <osc_get_rate+0x5c>
	return 0;
  400f12:	2300      	movs	r3, #0
}
  400f14:	4618      	mov	r0, r3
  400f16:	370c      	adds	r7, #12
  400f18:	46bd      	mov	sp, r7
  400f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f1e:	4770      	bx	lr
  400f20:	003d0900 	.word	0x003d0900
  400f24:	007a1200 	.word	0x007a1200
  400f28:	00b71b00 	.word	0x00b71b00

00400f2c <sysclk_get_main_hz>:
{
  400f2c:	b580      	push	{r7, lr}
  400f2e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f30:	2006      	movs	r0, #6
  400f32:	4b05      	ldr	r3, [pc, #20]	; (400f48 <sysclk_get_main_hz+0x1c>)
  400f34:	4798      	blx	r3
  400f36:	4602      	mov	r2, r0
  400f38:	4613      	mov	r3, r2
  400f3a:	009b      	lsls	r3, r3, #2
  400f3c:	4413      	add	r3, r2
  400f3e:	009a      	lsls	r2, r3, #2
  400f40:	4413      	add	r3, r2
}
  400f42:	4618      	mov	r0, r3
  400f44:	bd80      	pop	{r7, pc}
  400f46:	bf00      	nop
  400f48:	00400eb9 	.word	0x00400eb9

00400f4c <sysclk_get_cpu_hz>:
{
  400f4c:	b580      	push	{r7, lr}
  400f4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400f50:	4b02      	ldr	r3, [pc, #8]	; (400f5c <sysclk_get_cpu_hz+0x10>)
  400f52:	4798      	blx	r3
  400f54:	4603      	mov	r3, r0
}
  400f56:	4618      	mov	r0, r3
  400f58:	bd80      	pop	{r7, pc}
  400f5a:	bf00      	nop
  400f5c:	00400f2d 	.word	0x00400f2d

00400f60 <init>:
/************************************************************************/


// Função de inicialização do uC
void init(void)
{
  400f60:	b590      	push	{r4, r7, lr}
  400f62:	b083      	sub	sp, #12
  400f64:	af02      	add	r7, sp, #8
	sysclk_init();
  400f66:	4b28      	ldr	r3, [pc, #160]	; (401008 <init+0xa8>)
  400f68:	4798      	blx	r3
	
	WDT->WDT_MR=WDT_MR_WDDIS;
  400f6a:	4b28      	ldr	r3, [pc, #160]	; (40100c <init+0xac>)
  400f6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f70:	605a      	str	r2, [r3, #4]
	
	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED.
	pmc_enable_periph_clk(LED_PIO_ID);
  400f72:	200c      	movs	r0, #12
  400f74:	4b26      	ldr	r3, [pc, #152]	; (401010 <init+0xb0>)
  400f76:	4798      	blx	r3
	
	// Ativa o PIO na qual o BUZZER foi conectado
	// para que possamos controlar o BUZZER.
	pmc_enable_periph_clk(BUZ_PIO_ID);
  400f78:	200a      	movs	r0, #10
  400f7a:	4b25      	ldr	r3, [pc, #148]	; (401010 <init+0xb0>)
  400f7c:	4798      	blx	r3
	
	//Inicializa PC8 como saída
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  400f7e:	2300      	movs	r3, #0
  400f80:	9300      	str	r3, [sp, #0]
  400f82:	2300      	movs	r3, #0
  400f84:	2200      	movs	r2, #0
  400f86:	f44f 7180 	mov.w	r1, #256	; 0x100
  400f8a:	4822      	ldr	r0, [pc, #136]	; (401014 <init+0xb4>)
  400f8c:	4c22      	ldr	r4, [pc, #136]	; (401018 <init+0xb8>)
  400f8e:	47a0      	blx	r4
	
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  400f90:	2300      	movs	r3, #0
  400f92:	9300      	str	r3, [sp, #0]
  400f94:	2300      	movs	r3, #0
  400f96:	2200      	movs	r2, #0
  400f98:	2101      	movs	r1, #1
  400f9a:	4820      	ldr	r0, [pc, #128]	; (40101c <init+0xbc>)
  400f9c:	4c1e      	ldr	r4, [pc, #120]	; (401018 <init+0xb8>)
  400f9e:	47a0      	blx	r4

	pmc_enable_periph_clk(BUT_PIO_ID);
  400fa0:	200a      	movs	r0, #10
  400fa2:	4b1b      	ldr	r3, [pc, #108]	; (401010 <init+0xb0>)
  400fa4:	4798      	blx	r3
	pmc_enable_periph_clk(BUT1_PIO_ID);
  400fa6:	200a      	movs	r0, #10
  400fa8:	4b19      	ldr	r3, [pc, #100]	; (401010 <init+0xb0>)
  400faa:	4798      	blx	r3
	pio_set_input(BUT1_PIO, BUT_PIO_IDX_MASK,PIO_DEFAULT);
  400fac:	2200      	movs	r2, #0
  400fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400fb2:	481a      	ldr	r0, [pc, #104]	; (40101c <init+0xbc>)
  400fb4:	4b1a      	ldr	r3, [pc, #104]	; (401020 <init+0xc0>)
  400fb6:	4798      	blx	r3
	
	//Inicializa Led 1 
	pmc_enable_periph_clk(LED1_PIO_ID);
  400fb8:	200c      	movs	r0, #12
  400fba:	4b15      	ldr	r3, [pc, #84]	; (401010 <init+0xb0>)
  400fbc:	4798      	blx	r3
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, PIO_DEFAULT | PIO_PULLUP);
  400fbe:	2301      	movs	r3, #1
  400fc0:	9300      	str	r3, [sp, #0]
  400fc2:	2300      	movs	r3, #0
  400fc4:	2200      	movs	r2, #0
  400fc6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400fca:	4812      	ldr	r0, [pc, #72]	; (401014 <init+0xb4>)
  400fcc:	4c12      	ldr	r4, [pc, #72]	; (401018 <init+0xb8>)
  400fce:	47a0      	blx	r4
	//Inicializa Led 2
	pmc_enable_periph_clk(LED2_PIO_ID);
  400fd0:	2010      	movs	r0, #16
  400fd2:	4b0f      	ldr	r3, [pc, #60]	; (401010 <init+0xb0>)
  400fd4:	4798      	blx	r3
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, PIO_DEFAULT | PIO_PULLUP);
  400fd6:	2301      	movs	r3, #1
  400fd8:	9300      	str	r3, [sp, #0]
  400fda:	2300      	movs	r3, #0
  400fdc:	2200      	movs	r2, #0
  400fde:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400fe2:	4810      	ldr	r0, [pc, #64]	; (401024 <init+0xc4>)
  400fe4:	4c0c      	ldr	r4, [pc, #48]	; (401018 <init+0xb8>)
  400fe6:	47a0      	blx	r4
		
	//Inicializa Led 3
	pmc_enable_periph_clk(LED3_PIO_ID);
  400fe8:	2010      	movs	r0, #16
  400fea:	4b09      	ldr	r3, [pc, #36]	; (401010 <init+0xb0>)
  400fec:	4798      	blx	r3
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, PIO_DEFAULT | PIO_PULLUP);
  400fee:	2301      	movs	r3, #1
  400ff0:	9300      	str	r3, [sp, #0]
  400ff2:	2300      	movs	r3, #0
  400ff4:	2200      	movs	r2, #0
  400ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400ffa:	480a      	ldr	r0, [pc, #40]	; (401024 <init+0xc4>)
  400ffc:	4c06      	ldr	r4, [pc, #24]	; (401018 <init+0xb8>)
  400ffe:	47a0      	blx	r4
	
	// configura pino ligado ao botão como entrada com um pull-up.
	//pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, _PIO_PULLUP | _PIO_DEBOUNCE  | _PIO_OPENDRAIN);


}
  401000:	bf00      	nop
  401002:	3704      	adds	r7, #4
  401004:	46bd      	mov	sp, r7
  401006:	bd90      	pop	{r4, r7, pc}
  401008:	004004ad 	.word	0x004004ad
  40100c:	400e1850 	.word	0x400e1850
  401010:	00400af5 	.word	0x00400af5
  401014:	400e1200 	.word	0x400e1200
  401018:	00400655 	.word	0x00400655
  40101c:	400e0e00 	.word	0x400e0e00
  401020:	004005d5 	.word	0x004005d5
  401024:	400e1400 	.word	0x400e1400

00401028 <tone>:
int duration3[] = {         //duration of each note (in ms) Quarter Note is set to 250 ms
125, 125, 250, 125, 125, 250, 125, 125, 125, 125, 500, 125, 125, 125, 125, 125, 125, 125, 62, 62, 125, 125, 125, 125, 250, 250
};

//int durations[][] = {duration1, duration2, duration3};
void tone(long noteFreq,long duration){
  401028:	b5f0      	push	{r4, r5, r6, r7, lr}
  40102a:	b085      	sub	sp, #20
  40102c:	af00      	add	r7, sp, #0
  40102e:	6078      	str	r0, [r7, #4]
  401030:	6039      	str	r1, [r7, #0]
	const int t = 1000000.0/(noteFreq*2.0);
  401032:	4b5f      	ldr	r3, [pc, #380]	; (4011b0 <tone+0x188>)
  401034:	6878      	ldr	r0, [r7, #4]
  401036:	4798      	blx	r3
  401038:	4c5e      	ldr	r4, [pc, #376]	; (4011b4 <tone+0x18c>)
  40103a:	4602      	mov	r2, r0
  40103c:	460b      	mov	r3, r1
  40103e:	47a0      	blx	r4
  401040:	4603      	mov	r3, r0
  401042:	460c      	mov	r4, r1
  401044:	461a      	mov	r2, r3
  401046:	4623      	mov	r3, r4
  401048:	4c5b      	ldr	r4, [pc, #364]	; (4011b8 <tone+0x190>)
  40104a:	a157      	add	r1, pc, #348	; (adr r1, 4011a8 <tone+0x180>)
  40104c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401050:	47a0      	blx	r4
  401052:	4603      	mov	r3, r0
  401054:	460c      	mov	r4, r1
  401056:	4619      	mov	r1, r3
  401058:	4622      	mov	r2, r4
  40105a:	4b58      	ldr	r3, [pc, #352]	; (4011bc <tone+0x194>)
  40105c:	4608      	mov	r0, r1
  40105e:	4611      	mov	r1, r2
  401060:	4798      	blx	r3
  401062:	4603      	mov	r3, r0
  401064:	60bb      	str	r3, [r7, #8]

	for (int i = 0;i<(noteFreq*duration)/1000;i++)
  401066:	2300      	movs	r3, #0
  401068:	60fb      	str	r3, [r7, #12]
  40106a:	e088      	b.n	40117e <tone+0x156>
	{
		
		
		pio_set(PIOA,BUZ_PIO_IDX_MASK);
  40106c:	2101      	movs	r1, #1
  40106e:	4854      	ldr	r0, [pc, #336]	; (4011c0 <tone+0x198>)
  401070:	4b54      	ldr	r3, [pc, #336]	; (4011c4 <tone+0x19c>)
  401072:	4798      	blx	r3
		delay_us(t);
  401074:	68bb      	ldr	r3, [r7, #8]
  401076:	2b00      	cmp	r3, #0
  401078:	d024      	beq.n	4010c4 <tone+0x9c>
  40107a:	68bb      	ldr	r3, [r7, #8]
  40107c:	461d      	mov	r5, r3
  40107e:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401082:	4b51      	ldr	r3, [pc, #324]	; (4011c8 <tone+0x1a0>)
  401084:	4798      	blx	r3
  401086:	4603      	mov	r3, r0
  401088:	f04f 0400 	mov.w	r4, #0
  40108c:	fb03 f106 	mul.w	r1, r3, r6
  401090:	fb05 f204 	mul.w	r2, r5, r4
  401094:	440a      	add	r2, r1
  401096:	fba5 3403 	umull	r3, r4, r5, r3
  40109a:	4422      	add	r2, r4
  40109c:	4614      	mov	r4, r2
  40109e:	494b      	ldr	r1, [pc, #300]	; (4011cc <tone+0x1a4>)
  4010a0:	f04f 0200 	mov.w	r2, #0
  4010a4:	185d      	adds	r5, r3, r1
  4010a6:	eb44 0602 	adc.w	r6, r4, r2
  4010aa:	4628      	mov	r0, r5
  4010ac:	4631      	mov	r1, r6
  4010ae:	4c48      	ldr	r4, [pc, #288]	; (4011d0 <tone+0x1a8>)
  4010b0:	4a48      	ldr	r2, [pc, #288]	; (4011d4 <tone+0x1ac>)
  4010b2:	f04f 0300 	mov.w	r3, #0
  4010b6:	47a0      	blx	r4
  4010b8:	4603      	mov	r3, r0
  4010ba:	460c      	mov	r4, r1
  4010bc:	4618      	mov	r0, r3
  4010be:	4b46      	ldr	r3, [pc, #280]	; (4011d8 <tone+0x1b0>)
  4010c0:	4798      	blx	r3
  4010c2:	e016      	b.n	4010f2 <tone+0xca>
  4010c4:	4b40      	ldr	r3, [pc, #256]	; (4011c8 <tone+0x1a0>)
  4010c6:	4798      	blx	r3
  4010c8:	4603      	mov	r3, r0
  4010ca:	f04f 0400 	mov.w	r4, #0
  4010ce:	493f      	ldr	r1, [pc, #252]	; (4011cc <tone+0x1a4>)
  4010d0:	f04f 0200 	mov.w	r2, #0
  4010d4:	185d      	adds	r5, r3, r1
  4010d6:	eb44 0602 	adc.w	r6, r4, r2
  4010da:	4628      	mov	r0, r5
  4010dc:	4631      	mov	r1, r6
  4010de:	4c3c      	ldr	r4, [pc, #240]	; (4011d0 <tone+0x1a8>)
  4010e0:	4a3c      	ldr	r2, [pc, #240]	; (4011d4 <tone+0x1ac>)
  4010e2:	f04f 0300 	mov.w	r3, #0
  4010e6:	47a0      	blx	r4
  4010e8:	4603      	mov	r3, r0
  4010ea:	460c      	mov	r4, r1
  4010ec:	4618      	mov	r0, r3
  4010ee:	4b3a      	ldr	r3, [pc, #232]	; (4011d8 <tone+0x1b0>)
  4010f0:	4798      	blx	r3
		pio_clear(PIOA, BUZ_PIO_IDX_MASK);
  4010f2:	2101      	movs	r1, #1
  4010f4:	4832      	ldr	r0, [pc, #200]	; (4011c0 <tone+0x198>)
  4010f6:	4b39      	ldr	r3, [pc, #228]	; (4011dc <tone+0x1b4>)
  4010f8:	4798      	blx	r3
		delay_us(t);
  4010fa:	68bb      	ldr	r3, [r7, #8]
  4010fc:	2b00      	cmp	r3, #0
  4010fe:	d024      	beq.n	40114a <tone+0x122>
  401100:	68bb      	ldr	r3, [r7, #8]
  401102:	461d      	mov	r5, r3
  401104:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401108:	4b2f      	ldr	r3, [pc, #188]	; (4011c8 <tone+0x1a0>)
  40110a:	4798      	blx	r3
  40110c:	4603      	mov	r3, r0
  40110e:	f04f 0400 	mov.w	r4, #0
  401112:	fb03 f106 	mul.w	r1, r3, r6
  401116:	fb05 f204 	mul.w	r2, r5, r4
  40111a:	440a      	add	r2, r1
  40111c:	fba5 3403 	umull	r3, r4, r5, r3
  401120:	4422      	add	r2, r4
  401122:	4614      	mov	r4, r2
  401124:	4929      	ldr	r1, [pc, #164]	; (4011cc <tone+0x1a4>)
  401126:	f04f 0200 	mov.w	r2, #0
  40112a:	185d      	adds	r5, r3, r1
  40112c:	eb44 0602 	adc.w	r6, r4, r2
  401130:	4628      	mov	r0, r5
  401132:	4631      	mov	r1, r6
  401134:	4c26      	ldr	r4, [pc, #152]	; (4011d0 <tone+0x1a8>)
  401136:	4a27      	ldr	r2, [pc, #156]	; (4011d4 <tone+0x1ac>)
  401138:	f04f 0300 	mov.w	r3, #0
  40113c:	47a0      	blx	r4
  40113e:	4603      	mov	r3, r0
  401140:	460c      	mov	r4, r1
  401142:	4618      	mov	r0, r3
  401144:	4b24      	ldr	r3, [pc, #144]	; (4011d8 <tone+0x1b0>)
  401146:	4798      	blx	r3
  401148:	e016      	b.n	401178 <tone+0x150>
  40114a:	4b1f      	ldr	r3, [pc, #124]	; (4011c8 <tone+0x1a0>)
  40114c:	4798      	blx	r3
  40114e:	4603      	mov	r3, r0
  401150:	f04f 0400 	mov.w	r4, #0
  401154:	491d      	ldr	r1, [pc, #116]	; (4011cc <tone+0x1a4>)
  401156:	f04f 0200 	mov.w	r2, #0
  40115a:	185d      	adds	r5, r3, r1
  40115c:	eb44 0602 	adc.w	r6, r4, r2
  401160:	4628      	mov	r0, r5
  401162:	4631      	mov	r1, r6
  401164:	4c1a      	ldr	r4, [pc, #104]	; (4011d0 <tone+0x1a8>)
  401166:	4a1b      	ldr	r2, [pc, #108]	; (4011d4 <tone+0x1ac>)
  401168:	f04f 0300 	mov.w	r3, #0
  40116c:	47a0      	blx	r4
  40116e:	4603      	mov	r3, r0
  401170:	460c      	mov	r4, r1
  401172:	4618      	mov	r0, r3
  401174:	4b18      	ldr	r3, [pc, #96]	; (4011d8 <tone+0x1b0>)
  401176:	4798      	blx	r3
	for (int i = 0;i<(noteFreq*duration)/1000;i++)
  401178:	68fb      	ldr	r3, [r7, #12]
  40117a:	3301      	adds	r3, #1
  40117c:	60fb      	str	r3, [r7, #12]
  40117e:	687b      	ldr	r3, [r7, #4]
  401180:	683a      	ldr	r2, [r7, #0]
  401182:	fb02 f303 	mul.w	r3, r2, r3
  401186:	4a16      	ldr	r2, [pc, #88]	; (4011e0 <tone+0x1b8>)
  401188:	fb82 1203 	smull	r1, r2, r2, r3
  40118c:	1192      	asrs	r2, r2, #6
  40118e:	17db      	asrs	r3, r3, #31
  401190:	1ad2      	subs	r2, r2, r3
  401192:	68fb      	ldr	r3, [r7, #12]
  401194:	429a      	cmp	r2, r3
  401196:	f73f af69 	bgt.w	40106c <tone+0x44>
	}

}
  40119a:	bf00      	nop
  40119c:	3714      	adds	r7, #20
  40119e:	46bd      	mov	sp, r7
  4011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011a2:	bf00      	nop
  4011a4:	f3af 8000 	nop.w
  4011a8:	00000000 	.word	0x00000000
  4011ac:	412e8480 	.word	0x412e8480
  4011b0:	0040178d 	.word	0x0040178d
  4011b4:	004014f5 	.word	0x004014f5
  4011b8:	00401aad 	.word	0x00401aad
  4011bc:	00401c7d 	.word	0x00401c7d
  4011c0:	400e0e00 	.word	0x400e0e00
  4011c4:	00400555 	.word	0x00400555
  4011c8:	00400f4d 	.word	0x00400f4d
  4011cc:	005a83df 	.word	0x005a83df
  4011d0:	00401ccd 	.word	0x00401ccd
  4011d4:	005a83e0 	.word	0x005a83e0
  4011d8:	20400001 	.word	0x20400001
  4011dc:	00400571 	.word	0x00400571
  4011e0:	10624dd3 	.word	0x10624dd3

004011e4 <playMusic>:

void playMusic(int notes[], int duration[],int songLen,float songspeed){
  4011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011e6:	b087      	sub	sp, #28
  4011e8:	af00      	add	r7, sp, #0
  4011ea:	60f8      	str	r0, [r7, #12]
  4011ec:	60b9      	str	r1, [r7, #8]
  4011ee:	607a      	str	r2, [r7, #4]
  4011f0:	603b      	str	r3, [r7, #0]

	for(int i =0; i<songLen; i++){
  4011f2:	2300      	movs	r3, #0
  4011f4:	617b      	str	r3, [r7, #20]
  4011f6:	e06c      	b.n	4012d2 <playMusic+0xee>
		
		int wait = duration[i]*songspeed;
  4011f8:	697b      	ldr	r3, [r7, #20]
  4011fa:	009b      	lsls	r3, r3, #2
  4011fc:	68ba      	ldr	r2, [r7, #8]
  4011fe:	4413      	add	r3, r2
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	ee07 3a90 	vmov	s15, r3
  401206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  40120a:	edd7 7a00 	vldr	s15, [r7]
  40120e:	ee67 7a27 	vmul.f32	s15, s14, s15
  401212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401216:	ee17 3a90 	vmov	r3, s15
  40121a:	613b      	str	r3, [r7, #16]
			pio_clear(LED_PIO,LED_PIO_IDX_MASK);
  40121c:	f44f 7180 	mov.w	r1, #256	; 0x100
  401220:	4830      	ldr	r0, [pc, #192]	; (4012e4 <playMusic+0x100>)
  401222:	4b31      	ldr	r3, [pc, #196]	; (4012e8 <playMusic+0x104>)
  401224:	4798      	blx	r3

		tone(notes[i],duration[i]);
  401226:	697b      	ldr	r3, [r7, #20]
  401228:	009b      	lsls	r3, r3, #2
  40122a:	68fa      	ldr	r2, [r7, #12]
  40122c:	4413      	add	r3, r2
  40122e:	6818      	ldr	r0, [r3, #0]
  401230:	697b      	ldr	r3, [r7, #20]
  401232:	009b      	lsls	r3, r3, #2
  401234:	68ba      	ldr	r2, [r7, #8]
  401236:	4413      	add	r3, r2
  401238:	681b      	ldr	r3, [r3, #0]
  40123a:	4619      	mov	r1, r3
  40123c:	4b2b      	ldr	r3, [pc, #172]	; (4012ec <playMusic+0x108>)
  40123e:	4798      	blx	r3
			pio_set(LED_PIO,LED_PIO_IDX_MASK);
  401240:	f44f 7180 	mov.w	r1, #256	; 0x100
  401244:	4827      	ldr	r0, [pc, #156]	; (4012e4 <playMusic+0x100>)
  401246:	4b2a      	ldr	r3, [pc, #168]	; (4012f0 <playMusic+0x10c>)
  401248:	4798      	blx	r3

		delay_ms(wait);
  40124a:	693b      	ldr	r3, [r7, #16]
  40124c:	2b00      	cmp	r3, #0
  40124e:	d026      	beq.n	40129e <playMusic+0xba>
  401250:	693b      	ldr	r3, [r7, #16]
  401252:	461d      	mov	r5, r3
  401254:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401258:	4b26      	ldr	r3, [pc, #152]	; (4012f4 <playMusic+0x110>)
  40125a:	4798      	blx	r3
  40125c:	4603      	mov	r3, r0
  40125e:	f04f 0400 	mov.w	r4, #0
  401262:	fb03 f106 	mul.w	r1, r3, r6
  401266:	fb05 f204 	mul.w	r2, r5, r4
  40126a:	440a      	add	r2, r1
  40126c:	fba5 3403 	umull	r3, r4, r5, r3
  401270:	4422      	add	r2, r4
  401272:	4614      	mov	r4, r2
  401274:	f241 712b 	movw	r1, #5931	; 0x172b
  401278:	f04f 0200 	mov.w	r2, #0
  40127c:	185d      	adds	r5, r3, r1
  40127e:	eb44 0602 	adc.w	r6, r4, r2
  401282:	4628      	mov	r0, r5
  401284:	4631      	mov	r1, r6
  401286:	4c1c      	ldr	r4, [pc, #112]	; (4012f8 <playMusic+0x114>)
  401288:	f241 722c 	movw	r2, #5932	; 0x172c
  40128c:	f04f 0300 	mov.w	r3, #0
  401290:	47a0      	blx	r4
  401292:	4603      	mov	r3, r0
  401294:	460c      	mov	r4, r1
  401296:	4618      	mov	r0, r3
  401298:	4b18      	ldr	r3, [pc, #96]	; (4012fc <playMusic+0x118>)
  40129a:	4798      	blx	r3
  40129c:	e016      	b.n	4012cc <playMusic+0xe8>
  40129e:	4b15      	ldr	r3, [pc, #84]	; (4012f4 <playMusic+0x110>)
  4012a0:	4798      	blx	r3
  4012a2:	4603      	mov	r3, r0
  4012a4:	f04f 0400 	mov.w	r4, #0
  4012a8:	4915      	ldr	r1, [pc, #84]	; (401300 <playMusic+0x11c>)
  4012aa:	f04f 0200 	mov.w	r2, #0
  4012ae:	185d      	adds	r5, r3, r1
  4012b0:	eb44 0602 	adc.w	r6, r4, r2
  4012b4:	4628      	mov	r0, r5
  4012b6:	4631      	mov	r1, r6
  4012b8:	4c0f      	ldr	r4, [pc, #60]	; (4012f8 <playMusic+0x114>)
  4012ba:	4a12      	ldr	r2, [pc, #72]	; (401304 <playMusic+0x120>)
  4012bc:	f04f 0300 	mov.w	r3, #0
  4012c0:	47a0      	blx	r4
  4012c2:	4603      	mov	r3, r0
  4012c4:	460c      	mov	r4, r1
  4012c6:	4618      	mov	r0, r3
  4012c8:	4b0c      	ldr	r3, [pc, #48]	; (4012fc <playMusic+0x118>)
  4012ca:	4798      	blx	r3
	for(int i =0; i<songLen; i++){
  4012cc:	697b      	ldr	r3, [r7, #20]
  4012ce:	3301      	adds	r3, #1
  4012d0:	617b      	str	r3, [r7, #20]
  4012d2:	697a      	ldr	r2, [r7, #20]
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	429a      	cmp	r2, r3
  4012d8:	db8e      	blt.n	4011f8 <playMusic+0x14>
	}
}
  4012da:	bf00      	nop
  4012dc:	371c      	adds	r7, #28
  4012de:	46bd      	mov	sp, r7
  4012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012e2:	bf00      	nop
  4012e4:	400e1200 	.word	0x400e1200
  4012e8:	00400571 	.word	0x00400571
  4012ec:	00401029 	.word	0x00401029
  4012f0:	00400555 	.word	0x00400555
  4012f4:	00400f4d 	.word	0x00400f4d
  4012f8:	00401ccd 	.word	0x00401ccd
  4012fc:	20400001 	.word	0x20400001
  401300:	005a83df 	.word	0x005a83df
  401304:	005a83e0 	.word	0x005a83e0

00401308 <main>:
	}
}

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  401308:	b590      	push	{r4, r7, lr}
  40130a:	b089      	sub	sp, #36	; 0x24
  40130c:	af00      	add	r7, sp, #0
  // inicializa sistema e IOs
  init();
  40130e:	4b67      	ldr	r3, [pc, #412]	; (4014ac <main+0x1a4>)
  401310:	4798      	blx	r3
  

  // super loop
  // aplicacoes embarcadas não devem sair do while(1).
	int flag1 = 0;
  401312:	2300      	movs	r3, #0
  401314:	61fb      	str	r3, [r7, #28]
	int flag2 = 0;
  401316:	2300      	movs	r3, #0
  401318:	61bb      	str	r3, [r7, #24]
	int flag3 = 0;
  40131a:	2300      	movs	r3, #0
  40131c:	617b      	str	r3, [r7, #20]
	
	while(1){
	const int but1 = !pio_get(BUT1_PIO,PIO_INPUT,BUT1_PIO_IDX_MASK);
  40131e:	2204      	movs	r2, #4
  401320:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401324:	4862      	ldr	r0, [pc, #392]	; (4014b0 <main+0x1a8>)
  401326:	4b63      	ldr	r3, [pc, #396]	; (4014b4 <main+0x1ac>)
  401328:	4798      	blx	r3
  40132a:	4603      	mov	r3, r0
  40132c:	2b00      	cmp	r3, #0
  40132e:	bf0c      	ite	eq
  401330:	2301      	moveq	r3, #1
  401332:	2300      	movne	r3, #0
  401334:	b2db      	uxtb	r3, r3
  401336:	613b      	str	r3, [r7, #16]
	const int but2 = !pio_get(BUT2_PIO,PIO_INPUT,BUT2_PIO_IDX_MASK);
  401338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40133c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401340:	485d      	ldr	r0, [pc, #372]	; (4014b8 <main+0x1b0>)
  401342:	4b5c      	ldr	r3, [pc, #368]	; (4014b4 <main+0x1ac>)
  401344:	4798      	blx	r3
  401346:	4603      	mov	r3, r0
  401348:	2b00      	cmp	r3, #0
  40134a:	bf0c      	ite	eq
  40134c:	2301      	moveq	r3, #1
  40134e:	2300      	movne	r3, #0
  401350:	b2db      	uxtb	r3, r3
  401352:	60fb      	str	r3, [r7, #12]
	const int but3 = !pio_get(BUT3_PIO,PIO_INPUT,BUT3_PIO_IDX_MASK);
  401354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401358:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40135c:	4857      	ldr	r0, [pc, #348]	; (4014bc <main+0x1b4>)
  40135e:	4b55      	ldr	r3, [pc, #340]	; (4014b4 <main+0x1ac>)
  401360:	4798      	blx	r3
  401362:	4603      	mov	r3, r0
  401364:	2b00      	cmp	r3, #0
  401366:	bf0c      	ite	eq
  401368:	2301      	moveq	r3, #1
  40136a:	2300      	movne	r3, #0
  40136c:	b2db      	uxtb	r3, r3
  40136e:	60bb      	str	r3, [r7, #8]
	const int but0 = !pio_get(BUT_PIO,PIO_INPUT,BUT_PIO_IDX_MASK);
  401370:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401374:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401378:	484d      	ldr	r0, [pc, #308]	; (4014b0 <main+0x1a8>)
  40137a:	4b4e      	ldr	r3, [pc, #312]	; (4014b4 <main+0x1ac>)
  40137c:	4798      	blx	r3
  40137e:	4603      	mov	r3, r0
  401380:	2b00      	cmp	r3, #0
  401382:	bf0c      	ite	eq
  401384:	2301      	moveq	r3, #1
  401386:	2300      	movne	r3, #0
  401388:	b2db      	uxtb	r3, r3
  40138a:	607b      	str	r3, [r7, #4]

	

	if(but1){
  40138c:	693b      	ldr	r3, [r7, #16]
  40138e:	2b00      	cmp	r3, #0
  401390:	d006      	beq.n	4013a0 <main+0x98>
		flag1=1;
  401392:	2301      	movs	r3, #1
  401394:	61fb      	str	r3, [r7, #28]
		flag2=0;
  401396:	2300      	movs	r3, #0
  401398:	61bb      	str	r3, [r7, #24]
		flag3=0;
  40139a:	2300      	movs	r3, #0
  40139c:	617b      	str	r3, [r7, #20]
  40139e:	e012      	b.n	4013c6 <main+0xbe>
//		playMusic(notes1, duration1,203,songspeed);

	}else if(but2){
  4013a0:	68fb      	ldr	r3, [r7, #12]
  4013a2:	2b00      	cmp	r3, #0
  4013a4:	d006      	beq.n	4013b4 <main+0xac>
		flag2=1;
  4013a6:	2301      	movs	r3, #1
  4013a8:	61bb      	str	r3, [r7, #24]
		flag1=0;
  4013aa:	2300      	movs	r3, #0
  4013ac:	61fb      	str	r3, [r7, #28]
		flag3=0;
  4013ae:	2300      	movs	r3, #0
  4013b0:	617b      	str	r3, [r7, #20]
  4013b2:	e008      	b.n	4013c6 <main+0xbe>
//		playMusic(notes2, duration2,149,songspeed);

	}else if(but3){
  4013b4:	68bb      	ldr	r3, [r7, #8]
  4013b6:	2b00      	cmp	r3, #0
  4013b8:	d005      	beq.n	4013c6 <main+0xbe>
		flag3=1;
  4013ba:	2301      	movs	r3, #1
  4013bc:	617b      	str	r3, [r7, #20]
		flag1=0;
  4013be:	2300      	movs	r3, #0
  4013c0:	61fb      	str	r3, [r7, #28]
		flag2=0;
  4013c2:	2300      	movs	r3, #0
  4013c4:	61bb      	str	r3, [r7, #24]
//		playMusic(notes1, duration1,203,songspeed);

	}
	if(flag1){
  4013c6:	69fb      	ldr	r3, [r7, #28]
  4013c8:	2b00      	cmp	r3, #0
  4013ca:	d00f      	beq.n	4013ec <main+0xe4>
		pio_clear(LED1_PIO,LED1_PIO_IDX_MASK);
  4013cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4013d0:	483a      	ldr	r0, [pc, #232]	; (4014bc <main+0x1b4>)
  4013d2:	4b3b      	ldr	r3, [pc, #236]	; (4014c0 <main+0x1b8>)
  4013d4:	4798      	blx	r3
		pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  4013d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4013da:	4837      	ldr	r0, [pc, #220]	; (4014b8 <main+0x1b0>)
  4013dc:	4b39      	ldr	r3, [pc, #228]	; (4014c4 <main+0x1bc>)
  4013de:	4798      	blx	r3
		pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  4013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4013e4:	4834      	ldr	r0, [pc, #208]	; (4014b8 <main+0x1b0>)
  4013e6:	4b37      	ldr	r3, [pc, #220]	; (4014c4 <main+0x1bc>)
  4013e8:	4798      	blx	r3
  4013ea:	e024      	b.n	401436 <main+0x12e>
	}else if(flag2){
  4013ec:	69bb      	ldr	r3, [r7, #24]
  4013ee:	2b00      	cmp	r3, #0
  4013f0:	d00f      	beq.n	401412 <main+0x10a>
		pio_clear(LED2_PIO,LED2_PIO_IDX_MASK);
  4013f2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4013f6:	4830      	ldr	r0, [pc, #192]	; (4014b8 <main+0x1b0>)
  4013f8:	4b31      	ldr	r3, [pc, #196]	; (4014c0 <main+0x1b8>)
  4013fa:	4798      	blx	r3
		pio_set(LED1_PIO,LED1_PIO_IDX_MASK);
  4013fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401400:	482e      	ldr	r0, [pc, #184]	; (4014bc <main+0x1b4>)
  401402:	4b30      	ldr	r3, [pc, #192]	; (4014c4 <main+0x1bc>)
  401404:	4798      	blx	r3
		pio_set(LED3_PIO,LED3_PIO_IDX_MASK);
  401406:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40140a:	482b      	ldr	r0, [pc, #172]	; (4014b8 <main+0x1b0>)
  40140c:	4b2d      	ldr	r3, [pc, #180]	; (4014c4 <main+0x1bc>)
  40140e:	4798      	blx	r3
  401410:	e011      	b.n	401436 <main+0x12e>
	}else if(flag3){
  401412:	697b      	ldr	r3, [r7, #20]
  401414:	2b00      	cmp	r3, #0
  401416:	d00e      	beq.n	401436 <main+0x12e>
		pio_clear(LED3_PIO,LED3_PIO_IDX_MASK);
  401418:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40141c:	4826      	ldr	r0, [pc, #152]	; (4014b8 <main+0x1b0>)
  40141e:	4b28      	ldr	r3, [pc, #160]	; (4014c0 <main+0x1b8>)
  401420:	4798      	blx	r3
		pio_set(LED1_PIO,LED1_PIO_IDX_MASK);
  401422:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401426:	4825      	ldr	r0, [pc, #148]	; (4014bc <main+0x1b4>)
  401428:	4b26      	ldr	r3, [pc, #152]	; (4014c4 <main+0x1bc>)
  40142a:	4798      	blx	r3
		pio_set(LED2_PIO,LED2_PIO_IDX_MASK);
  40142c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401430:	4821      	ldr	r0, [pc, #132]	; (4014b8 <main+0x1b0>)
  401432:	4b24      	ldr	r3, [pc, #144]	; (4014c4 <main+0x1bc>)
  401434:	4798      	blx	r3
	}
	
	pio_clear(PIOA, BUZ_PIO_IDX_MASK);
  401436:	2101      	movs	r1, #1
  401438:	481d      	ldr	r0, [pc, #116]	; (4014b0 <main+0x1a8>)
  40143a:	4b21      	ldr	r3, [pc, #132]	; (4014c0 <main+0x1b8>)
  40143c:	4798      	blx	r3
	
	
		if (but0 && flag1) {
  40143e:	687b      	ldr	r3, [r7, #4]
  401440:	2b00      	cmp	r3, #0
  401442:	d00d      	beq.n	401460 <main+0x158>
  401444:	69fb      	ldr	r3, [r7, #28]
  401446:	2b00      	cmp	r3, #0
  401448:	d00a      	beq.n	401460 <main+0x158>
			playMusic(notes1, duration1,203,songspeed);
  40144a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 4014c8 <main+0x1c0>
  40144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401452:	ee17 3a90 	vmov	r3, s15
  401456:	22cb      	movs	r2, #203	; 0xcb
  401458:	491c      	ldr	r1, [pc, #112]	; (4014cc <main+0x1c4>)
  40145a:	481d      	ldr	r0, [pc, #116]	; (4014d0 <main+0x1c8>)
  40145c:	4c1d      	ldr	r4, [pc, #116]	; (4014d4 <main+0x1cc>)
  40145e:	47a0      	blx	r4
			
		}
		if (but0 && flag2) {
  401460:	687b      	ldr	r3, [r7, #4]
  401462:	2b00      	cmp	r3, #0
  401464:	d00d      	beq.n	401482 <main+0x17a>
  401466:	69bb      	ldr	r3, [r7, #24]
  401468:	2b00      	cmp	r3, #0
  40146a:	d00a      	beq.n	401482 <main+0x17a>
			playMusic(notes2, duration2,149,songspeed);
  40146c:	eddf 7a16 	vldr	s15, [pc, #88]	; 4014c8 <main+0x1c0>
  401470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401474:	ee17 3a90 	vmov	r3, s15
  401478:	2295      	movs	r2, #149	; 0x95
  40147a:	4917      	ldr	r1, [pc, #92]	; (4014d8 <main+0x1d0>)
  40147c:	4817      	ldr	r0, [pc, #92]	; (4014dc <main+0x1d4>)
  40147e:	4c15      	ldr	r4, [pc, #84]	; (4014d4 <main+0x1cc>)
  401480:	47a0      	blx	r4
			
		}
		if (but0 && flag3) {
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	2b00      	cmp	r3, #0
  401486:	f43f af4a 	beq.w	40131e <main+0x16>
  40148a:	697b      	ldr	r3, [r7, #20]
  40148c:	2b00      	cmp	r3, #0
  40148e:	f43f af46 	beq.w	40131e <main+0x16>
			playMusic(notes3, duration3,26,songspeed);
  401492:	eddf 7a0d 	vldr	s15, [pc, #52]	; 4014c8 <main+0x1c0>
  401496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40149a:	ee17 3a90 	vmov	r3, s15
  40149e:	221a      	movs	r2, #26
  4014a0:	490f      	ldr	r1, [pc, #60]	; (4014e0 <main+0x1d8>)
  4014a2:	4810      	ldr	r0, [pc, #64]	; (4014e4 <main+0x1dc>)
  4014a4:	4c0b      	ldr	r4, [pc, #44]	; (4014d4 <main+0x1cc>)
  4014a6:	47a0      	blx	r4
	while(1){
  4014a8:	e739      	b.n	40131e <main+0x16>
  4014aa:	bf00      	nop
  4014ac:	00400f61 	.word	0x00400f61
  4014b0:	400e0e00 	.word	0x400e0e00
  4014b4:	0040058d 	.word	0x0040058d
  4014b8:	400e1400 	.word	0x400e1400
  4014bc:	400e1200 	.word	0x400e1200
  4014c0:	00400571 	.word	0x00400571
  4014c4:	00400555 	.word	0x00400555
  4014c8:	00000001 	.word	0x00000001
  4014cc:	204005f4 	.word	0x204005f4
  4014d0:	20400010 	.word	0x20400010
  4014d4:	004011e5 	.word	0x004011e5
  4014d8:	20400920 	.word	0x20400920
  4014dc:	2040033c 	.word	0x2040033c
  4014e0:	20400b74 	.word	0x20400b74
  4014e4:	2040058c 	.word	0x2040058c

004014e8 <__aeabi_drsub>:
  4014e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4014ec:	e002      	b.n	4014f4 <__adddf3>
  4014ee:	bf00      	nop

004014f0 <__aeabi_dsub>:
  4014f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004014f4 <__adddf3>:
  4014f4:	b530      	push	{r4, r5, lr}
  4014f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4014fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4014fe:	ea94 0f05 	teq	r4, r5
  401502:	bf08      	it	eq
  401504:	ea90 0f02 	teqeq	r0, r2
  401508:	bf1f      	itttt	ne
  40150a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40150e:	ea55 0c02 	orrsne.w	ip, r5, r2
  401512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40151a:	f000 80e2 	beq.w	4016e2 <__adddf3+0x1ee>
  40151e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401526:	bfb8      	it	lt
  401528:	426d      	neglt	r5, r5
  40152a:	dd0c      	ble.n	401546 <__adddf3+0x52>
  40152c:	442c      	add	r4, r5
  40152e:	ea80 0202 	eor.w	r2, r0, r2
  401532:	ea81 0303 	eor.w	r3, r1, r3
  401536:	ea82 0000 	eor.w	r0, r2, r0
  40153a:	ea83 0101 	eor.w	r1, r3, r1
  40153e:	ea80 0202 	eor.w	r2, r0, r2
  401542:	ea81 0303 	eor.w	r3, r1, r3
  401546:	2d36      	cmp	r5, #54	; 0x36
  401548:	bf88      	it	hi
  40154a:	bd30      	pophi	{r4, r5, pc}
  40154c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401550:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40155c:	d002      	beq.n	401564 <__adddf3+0x70>
  40155e:	4240      	negs	r0, r0
  401560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401568:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40156c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401570:	d002      	beq.n	401578 <__adddf3+0x84>
  401572:	4252      	negs	r2, r2
  401574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401578:	ea94 0f05 	teq	r4, r5
  40157c:	f000 80a7 	beq.w	4016ce <__adddf3+0x1da>
  401580:	f1a4 0401 	sub.w	r4, r4, #1
  401584:	f1d5 0e20 	rsbs	lr, r5, #32
  401588:	db0d      	blt.n	4015a6 <__adddf3+0xb2>
  40158a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40158e:	fa22 f205 	lsr.w	r2, r2, r5
  401592:	1880      	adds	r0, r0, r2
  401594:	f141 0100 	adc.w	r1, r1, #0
  401598:	fa03 f20e 	lsl.w	r2, r3, lr
  40159c:	1880      	adds	r0, r0, r2
  40159e:	fa43 f305 	asr.w	r3, r3, r5
  4015a2:	4159      	adcs	r1, r3
  4015a4:	e00e      	b.n	4015c4 <__adddf3+0xd0>
  4015a6:	f1a5 0520 	sub.w	r5, r5, #32
  4015aa:	f10e 0e20 	add.w	lr, lr, #32
  4015ae:	2a01      	cmp	r2, #1
  4015b0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4015b4:	bf28      	it	cs
  4015b6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4015ba:	fa43 f305 	asr.w	r3, r3, r5
  4015be:	18c0      	adds	r0, r0, r3
  4015c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4015c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4015c8:	d507      	bpl.n	4015da <__adddf3+0xe6>
  4015ca:	f04f 0e00 	mov.w	lr, #0
  4015ce:	f1dc 0c00 	rsbs	ip, ip, #0
  4015d2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4015d6:	eb6e 0101 	sbc.w	r1, lr, r1
  4015da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4015de:	d31b      	bcc.n	401618 <__adddf3+0x124>
  4015e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4015e4:	d30c      	bcc.n	401600 <__adddf3+0x10c>
  4015e6:	0849      	lsrs	r1, r1, #1
  4015e8:	ea5f 0030 	movs.w	r0, r0, rrx
  4015ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4015f0:	f104 0401 	add.w	r4, r4, #1
  4015f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4015f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4015fc:	f080 809a 	bcs.w	401734 <__adddf3+0x240>
  401600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401604:	bf08      	it	eq
  401606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40160a:	f150 0000 	adcs.w	r0, r0, #0
  40160e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401612:	ea41 0105 	orr.w	r1, r1, r5
  401616:	bd30      	pop	{r4, r5, pc}
  401618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40161c:	4140      	adcs	r0, r0
  40161e:	eb41 0101 	adc.w	r1, r1, r1
  401622:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401626:	f1a4 0401 	sub.w	r4, r4, #1
  40162a:	d1e9      	bne.n	401600 <__adddf3+0x10c>
  40162c:	f091 0f00 	teq	r1, #0
  401630:	bf04      	itt	eq
  401632:	4601      	moveq	r1, r0
  401634:	2000      	moveq	r0, #0
  401636:	fab1 f381 	clz	r3, r1
  40163a:	bf08      	it	eq
  40163c:	3320      	addeq	r3, #32
  40163e:	f1a3 030b 	sub.w	r3, r3, #11
  401642:	f1b3 0220 	subs.w	r2, r3, #32
  401646:	da0c      	bge.n	401662 <__adddf3+0x16e>
  401648:	320c      	adds	r2, #12
  40164a:	dd08      	ble.n	40165e <__adddf3+0x16a>
  40164c:	f102 0c14 	add.w	ip, r2, #20
  401650:	f1c2 020c 	rsb	r2, r2, #12
  401654:	fa01 f00c 	lsl.w	r0, r1, ip
  401658:	fa21 f102 	lsr.w	r1, r1, r2
  40165c:	e00c      	b.n	401678 <__adddf3+0x184>
  40165e:	f102 0214 	add.w	r2, r2, #20
  401662:	bfd8      	it	le
  401664:	f1c2 0c20 	rsble	ip, r2, #32
  401668:	fa01 f102 	lsl.w	r1, r1, r2
  40166c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401670:	bfdc      	itt	le
  401672:	ea41 010c 	orrle.w	r1, r1, ip
  401676:	4090      	lslle	r0, r2
  401678:	1ae4      	subs	r4, r4, r3
  40167a:	bfa2      	ittt	ge
  40167c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401680:	4329      	orrge	r1, r5
  401682:	bd30      	popge	{r4, r5, pc}
  401684:	ea6f 0404 	mvn.w	r4, r4
  401688:	3c1f      	subs	r4, #31
  40168a:	da1c      	bge.n	4016c6 <__adddf3+0x1d2>
  40168c:	340c      	adds	r4, #12
  40168e:	dc0e      	bgt.n	4016ae <__adddf3+0x1ba>
  401690:	f104 0414 	add.w	r4, r4, #20
  401694:	f1c4 0220 	rsb	r2, r4, #32
  401698:	fa20 f004 	lsr.w	r0, r0, r4
  40169c:	fa01 f302 	lsl.w	r3, r1, r2
  4016a0:	ea40 0003 	orr.w	r0, r0, r3
  4016a4:	fa21 f304 	lsr.w	r3, r1, r4
  4016a8:	ea45 0103 	orr.w	r1, r5, r3
  4016ac:	bd30      	pop	{r4, r5, pc}
  4016ae:	f1c4 040c 	rsb	r4, r4, #12
  4016b2:	f1c4 0220 	rsb	r2, r4, #32
  4016b6:	fa20 f002 	lsr.w	r0, r0, r2
  4016ba:	fa01 f304 	lsl.w	r3, r1, r4
  4016be:	ea40 0003 	orr.w	r0, r0, r3
  4016c2:	4629      	mov	r1, r5
  4016c4:	bd30      	pop	{r4, r5, pc}
  4016c6:	fa21 f004 	lsr.w	r0, r1, r4
  4016ca:	4629      	mov	r1, r5
  4016cc:	bd30      	pop	{r4, r5, pc}
  4016ce:	f094 0f00 	teq	r4, #0
  4016d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4016d6:	bf06      	itte	eq
  4016d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4016dc:	3401      	addeq	r4, #1
  4016de:	3d01      	subne	r5, #1
  4016e0:	e74e      	b.n	401580 <__adddf3+0x8c>
  4016e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4016e6:	bf18      	it	ne
  4016e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4016ec:	d029      	beq.n	401742 <__adddf3+0x24e>
  4016ee:	ea94 0f05 	teq	r4, r5
  4016f2:	bf08      	it	eq
  4016f4:	ea90 0f02 	teqeq	r0, r2
  4016f8:	d005      	beq.n	401706 <__adddf3+0x212>
  4016fa:	ea54 0c00 	orrs.w	ip, r4, r0
  4016fe:	bf04      	itt	eq
  401700:	4619      	moveq	r1, r3
  401702:	4610      	moveq	r0, r2
  401704:	bd30      	pop	{r4, r5, pc}
  401706:	ea91 0f03 	teq	r1, r3
  40170a:	bf1e      	ittt	ne
  40170c:	2100      	movne	r1, #0
  40170e:	2000      	movne	r0, #0
  401710:	bd30      	popne	{r4, r5, pc}
  401712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401716:	d105      	bne.n	401724 <__adddf3+0x230>
  401718:	0040      	lsls	r0, r0, #1
  40171a:	4149      	adcs	r1, r1
  40171c:	bf28      	it	cs
  40171e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401722:	bd30      	pop	{r4, r5, pc}
  401724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401728:	bf3c      	itt	cc
  40172a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40172e:	bd30      	popcc	{r4, r5, pc}
  401730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40173c:	f04f 0000 	mov.w	r0, #0
  401740:	bd30      	pop	{r4, r5, pc}
  401742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401746:	bf1a      	itte	ne
  401748:	4619      	movne	r1, r3
  40174a:	4610      	movne	r0, r2
  40174c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401750:	bf1c      	itt	ne
  401752:	460b      	movne	r3, r1
  401754:	4602      	movne	r2, r0
  401756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40175a:	bf06      	itte	eq
  40175c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401760:	ea91 0f03 	teqeq	r1, r3
  401764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401768:	bd30      	pop	{r4, r5, pc}
  40176a:	bf00      	nop

0040176c <__aeabi_ui2d>:
  40176c:	f090 0f00 	teq	r0, #0
  401770:	bf04      	itt	eq
  401772:	2100      	moveq	r1, #0
  401774:	4770      	bxeq	lr
  401776:	b530      	push	{r4, r5, lr}
  401778:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40177c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401780:	f04f 0500 	mov.w	r5, #0
  401784:	f04f 0100 	mov.w	r1, #0
  401788:	e750      	b.n	40162c <__adddf3+0x138>
  40178a:	bf00      	nop

0040178c <__aeabi_i2d>:
  40178c:	f090 0f00 	teq	r0, #0
  401790:	bf04      	itt	eq
  401792:	2100      	moveq	r1, #0
  401794:	4770      	bxeq	lr
  401796:	b530      	push	{r4, r5, lr}
  401798:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40179c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4017a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4017a4:	bf48      	it	mi
  4017a6:	4240      	negmi	r0, r0
  4017a8:	f04f 0100 	mov.w	r1, #0
  4017ac:	e73e      	b.n	40162c <__adddf3+0x138>
  4017ae:	bf00      	nop

004017b0 <__aeabi_f2d>:
  4017b0:	0042      	lsls	r2, r0, #1
  4017b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4017b6:	ea4f 0131 	mov.w	r1, r1, rrx
  4017ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4017be:	bf1f      	itttt	ne
  4017c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4017c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4017c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4017cc:	4770      	bxne	lr
  4017ce:	f092 0f00 	teq	r2, #0
  4017d2:	bf14      	ite	ne
  4017d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4017d8:	4770      	bxeq	lr
  4017da:	b530      	push	{r4, r5, lr}
  4017dc:	f44f 7460 	mov.w	r4, #896	; 0x380
  4017e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4017e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4017e8:	e720      	b.n	40162c <__adddf3+0x138>
  4017ea:	bf00      	nop

004017ec <__aeabi_ul2d>:
  4017ec:	ea50 0201 	orrs.w	r2, r0, r1
  4017f0:	bf08      	it	eq
  4017f2:	4770      	bxeq	lr
  4017f4:	b530      	push	{r4, r5, lr}
  4017f6:	f04f 0500 	mov.w	r5, #0
  4017fa:	e00a      	b.n	401812 <__aeabi_l2d+0x16>

004017fc <__aeabi_l2d>:
  4017fc:	ea50 0201 	orrs.w	r2, r0, r1
  401800:	bf08      	it	eq
  401802:	4770      	bxeq	lr
  401804:	b530      	push	{r4, r5, lr}
  401806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40180a:	d502      	bpl.n	401812 <__aeabi_l2d+0x16>
  40180c:	4240      	negs	r0, r0
  40180e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401812:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401816:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40181a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40181e:	f43f aedc 	beq.w	4015da <__adddf3+0xe6>
  401822:	f04f 0203 	mov.w	r2, #3
  401826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40182a:	bf18      	it	ne
  40182c:	3203      	addne	r2, #3
  40182e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401832:	bf18      	it	ne
  401834:	3203      	addne	r2, #3
  401836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40183a:	f1c2 0320 	rsb	r3, r2, #32
  40183e:	fa00 fc03 	lsl.w	ip, r0, r3
  401842:	fa20 f002 	lsr.w	r0, r0, r2
  401846:	fa01 fe03 	lsl.w	lr, r1, r3
  40184a:	ea40 000e 	orr.w	r0, r0, lr
  40184e:	fa21 f102 	lsr.w	r1, r1, r2
  401852:	4414      	add	r4, r2
  401854:	e6c1      	b.n	4015da <__adddf3+0xe6>
  401856:	bf00      	nop

00401858 <__aeabi_dmul>:
  401858:	b570      	push	{r4, r5, r6, lr}
  40185a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40185e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401866:	bf1d      	ittte	ne
  401868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40186c:	ea94 0f0c 	teqne	r4, ip
  401870:	ea95 0f0c 	teqne	r5, ip
  401874:	f000 f8de 	bleq	401a34 <__aeabi_dmul+0x1dc>
  401878:	442c      	add	r4, r5
  40187a:	ea81 0603 	eor.w	r6, r1, r3
  40187e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40188a:	bf18      	it	ne
  40188c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401898:	d038      	beq.n	40190c <__aeabi_dmul+0xb4>
  40189a:	fba0 ce02 	umull	ip, lr, r0, r2
  40189e:	f04f 0500 	mov.w	r5, #0
  4018a2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4018a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4018aa:	fbe0 e503 	umlal	lr, r5, r0, r3
  4018ae:	f04f 0600 	mov.w	r6, #0
  4018b2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4018b6:	f09c 0f00 	teq	ip, #0
  4018ba:	bf18      	it	ne
  4018bc:	f04e 0e01 	orrne.w	lr, lr, #1
  4018c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4018c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4018c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4018cc:	d204      	bcs.n	4018d8 <__aeabi_dmul+0x80>
  4018ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4018d2:	416d      	adcs	r5, r5
  4018d4:	eb46 0606 	adc.w	r6, r6, r6
  4018d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4018dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4018e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4018e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4018e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4018ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4018f0:	bf88      	it	hi
  4018f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4018f6:	d81e      	bhi.n	401936 <__aeabi_dmul+0xde>
  4018f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4018fc:	bf08      	it	eq
  4018fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401902:	f150 0000 	adcs.w	r0, r0, #0
  401906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40190a:	bd70      	pop	{r4, r5, r6, pc}
  40190c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401910:	ea46 0101 	orr.w	r1, r6, r1
  401914:	ea40 0002 	orr.w	r0, r0, r2
  401918:	ea81 0103 	eor.w	r1, r1, r3
  40191c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401920:	bfc2      	ittt	gt
  401922:	ebd4 050c 	rsbsgt	r5, r4, ip
  401926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40192a:	bd70      	popgt	{r4, r5, r6, pc}
  40192c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401930:	f04f 0e00 	mov.w	lr, #0
  401934:	3c01      	subs	r4, #1
  401936:	f300 80ab 	bgt.w	401a90 <__aeabi_dmul+0x238>
  40193a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40193e:	bfde      	ittt	le
  401940:	2000      	movle	r0, #0
  401942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401946:	bd70      	pople	{r4, r5, r6, pc}
  401948:	f1c4 0400 	rsb	r4, r4, #0
  40194c:	3c20      	subs	r4, #32
  40194e:	da35      	bge.n	4019bc <__aeabi_dmul+0x164>
  401950:	340c      	adds	r4, #12
  401952:	dc1b      	bgt.n	40198c <__aeabi_dmul+0x134>
  401954:	f104 0414 	add.w	r4, r4, #20
  401958:	f1c4 0520 	rsb	r5, r4, #32
  40195c:	fa00 f305 	lsl.w	r3, r0, r5
  401960:	fa20 f004 	lsr.w	r0, r0, r4
  401964:	fa01 f205 	lsl.w	r2, r1, r5
  401968:	ea40 0002 	orr.w	r0, r0, r2
  40196c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401978:	fa21 f604 	lsr.w	r6, r1, r4
  40197c:	eb42 0106 	adc.w	r1, r2, r6
  401980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401984:	bf08      	it	eq
  401986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40198a:	bd70      	pop	{r4, r5, r6, pc}
  40198c:	f1c4 040c 	rsb	r4, r4, #12
  401990:	f1c4 0520 	rsb	r5, r4, #32
  401994:	fa00 f304 	lsl.w	r3, r0, r4
  401998:	fa20 f005 	lsr.w	r0, r0, r5
  40199c:	fa01 f204 	lsl.w	r2, r1, r4
  4019a0:	ea40 0002 	orr.w	r0, r0, r2
  4019a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4019a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4019ac:	f141 0100 	adc.w	r1, r1, #0
  4019b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4019b4:	bf08      	it	eq
  4019b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4019ba:	bd70      	pop	{r4, r5, r6, pc}
  4019bc:	f1c4 0520 	rsb	r5, r4, #32
  4019c0:	fa00 f205 	lsl.w	r2, r0, r5
  4019c4:	ea4e 0e02 	orr.w	lr, lr, r2
  4019c8:	fa20 f304 	lsr.w	r3, r0, r4
  4019cc:	fa01 f205 	lsl.w	r2, r1, r5
  4019d0:	ea43 0302 	orr.w	r3, r3, r2
  4019d4:	fa21 f004 	lsr.w	r0, r1, r4
  4019d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4019dc:	fa21 f204 	lsr.w	r2, r1, r4
  4019e0:	ea20 0002 	bic.w	r0, r0, r2
  4019e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4019e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4019ec:	bf08      	it	eq
  4019ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4019f2:	bd70      	pop	{r4, r5, r6, pc}
  4019f4:	f094 0f00 	teq	r4, #0
  4019f8:	d10f      	bne.n	401a1a <__aeabi_dmul+0x1c2>
  4019fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4019fe:	0040      	lsls	r0, r0, #1
  401a00:	eb41 0101 	adc.w	r1, r1, r1
  401a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401a08:	bf08      	it	eq
  401a0a:	3c01      	subeq	r4, #1
  401a0c:	d0f7      	beq.n	4019fe <__aeabi_dmul+0x1a6>
  401a0e:	ea41 0106 	orr.w	r1, r1, r6
  401a12:	f095 0f00 	teq	r5, #0
  401a16:	bf18      	it	ne
  401a18:	4770      	bxne	lr
  401a1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401a1e:	0052      	lsls	r2, r2, #1
  401a20:	eb43 0303 	adc.w	r3, r3, r3
  401a24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401a28:	bf08      	it	eq
  401a2a:	3d01      	subeq	r5, #1
  401a2c:	d0f7      	beq.n	401a1e <__aeabi_dmul+0x1c6>
  401a2e:	ea43 0306 	orr.w	r3, r3, r6
  401a32:	4770      	bx	lr
  401a34:	ea94 0f0c 	teq	r4, ip
  401a38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401a3c:	bf18      	it	ne
  401a3e:	ea95 0f0c 	teqne	r5, ip
  401a42:	d00c      	beq.n	401a5e <__aeabi_dmul+0x206>
  401a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401a48:	bf18      	it	ne
  401a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401a4e:	d1d1      	bne.n	4019f4 <__aeabi_dmul+0x19c>
  401a50:	ea81 0103 	eor.w	r1, r1, r3
  401a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401a58:	f04f 0000 	mov.w	r0, #0
  401a5c:	bd70      	pop	{r4, r5, r6, pc}
  401a5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401a62:	bf06      	itte	eq
  401a64:	4610      	moveq	r0, r2
  401a66:	4619      	moveq	r1, r3
  401a68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401a6c:	d019      	beq.n	401aa2 <__aeabi_dmul+0x24a>
  401a6e:	ea94 0f0c 	teq	r4, ip
  401a72:	d102      	bne.n	401a7a <__aeabi_dmul+0x222>
  401a74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401a78:	d113      	bne.n	401aa2 <__aeabi_dmul+0x24a>
  401a7a:	ea95 0f0c 	teq	r5, ip
  401a7e:	d105      	bne.n	401a8c <__aeabi_dmul+0x234>
  401a80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401a84:	bf1c      	itt	ne
  401a86:	4610      	movne	r0, r2
  401a88:	4619      	movne	r1, r3
  401a8a:	d10a      	bne.n	401aa2 <__aeabi_dmul+0x24a>
  401a8c:	ea81 0103 	eor.w	r1, r1, r3
  401a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401a94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a9c:	f04f 0000 	mov.w	r0, #0
  401aa0:	bd70      	pop	{r4, r5, r6, pc}
  401aa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401aa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401aaa:	bd70      	pop	{r4, r5, r6, pc}

00401aac <__aeabi_ddiv>:
  401aac:	b570      	push	{r4, r5, r6, lr}
  401aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401aba:	bf1d      	ittte	ne
  401abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401ac0:	ea94 0f0c 	teqne	r4, ip
  401ac4:	ea95 0f0c 	teqne	r5, ip
  401ac8:	f000 f8a7 	bleq	401c1a <__aeabi_ddiv+0x16e>
  401acc:	eba4 0405 	sub.w	r4, r4, r5
  401ad0:	ea81 0e03 	eor.w	lr, r1, r3
  401ad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401ad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401adc:	f000 8088 	beq.w	401bf0 <__aeabi_ddiv+0x144>
  401ae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401ae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401ae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401aec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401af0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401af4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401af8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401afc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401b00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401b04:	429d      	cmp	r5, r3
  401b06:	bf08      	it	eq
  401b08:	4296      	cmpeq	r6, r2
  401b0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401b0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401b12:	d202      	bcs.n	401b1a <__aeabi_ddiv+0x6e>
  401b14:	085b      	lsrs	r3, r3, #1
  401b16:	ea4f 0232 	mov.w	r2, r2, rrx
  401b1a:	1ab6      	subs	r6, r6, r2
  401b1c:	eb65 0503 	sbc.w	r5, r5, r3
  401b20:	085b      	lsrs	r3, r3, #1
  401b22:	ea4f 0232 	mov.w	r2, r2, rrx
  401b26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401b2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401b2e:	ebb6 0e02 	subs.w	lr, r6, r2
  401b32:	eb75 0e03 	sbcs.w	lr, r5, r3
  401b36:	bf22      	ittt	cs
  401b38:	1ab6      	subcs	r6, r6, r2
  401b3a:	4675      	movcs	r5, lr
  401b3c:	ea40 000c 	orrcs.w	r0, r0, ip
  401b40:	085b      	lsrs	r3, r3, #1
  401b42:	ea4f 0232 	mov.w	r2, r2, rrx
  401b46:	ebb6 0e02 	subs.w	lr, r6, r2
  401b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401b4e:	bf22      	ittt	cs
  401b50:	1ab6      	subcs	r6, r6, r2
  401b52:	4675      	movcs	r5, lr
  401b54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401b58:	085b      	lsrs	r3, r3, #1
  401b5a:	ea4f 0232 	mov.w	r2, r2, rrx
  401b5e:	ebb6 0e02 	subs.w	lr, r6, r2
  401b62:	eb75 0e03 	sbcs.w	lr, r5, r3
  401b66:	bf22      	ittt	cs
  401b68:	1ab6      	subcs	r6, r6, r2
  401b6a:	4675      	movcs	r5, lr
  401b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401b70:	085b      	lsrs	r3, r3, #1
  401b72:	ea4f 0232 	mov.w	r2, r2, rrx
  401b76:	ebb6 0e02 	subs.w	lr, r6, r2
  401b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401b7e:	bf22      	ittt	cs
  401b80:	1ab6      	subcs	r6, r6, r2
  401b82:	4675      	movcs	r5, lr
  401b84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401b88:	ea55 0e06 	orrs.w	lr, r5, r6
  401b8c:	d018      	beq.n	401bc0 <__aeabi_ddiv+0x114>
  401b8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401b92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401b96:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401b9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401b9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401ba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401ba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401baa:	d1c0      	bne.n	401b2e <__aeabi_ddiv+0x82>
  401bac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401bb0:	d10b      	bne.n	401bca <__aeabi_ddiv+0x11e>
  401bb2:	ea41 0100 	orr.w	r1, r1, r0
  401bb6:	f04f 0000 	mov.w	r0, #0
  401bba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401bbe:	e7b6      	b.n	401b2e <__aeabi_ddiv+0x82>
  401bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401bc4:	bf04      	itt	eq
  401bc6:	4301      	orreq	r1, r0
  401bc8:	2000      	moveq	r0, #0
  401bca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401bce:	bf88      	it	hi
  401bd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401bd4:	f63f aeaf 	bhi.w	401936 <__aeabi_dmul+0xde>
  401bd8:	ebb5 0c03 	subs.w	ip, r5, r3
  401bdc:	bf04      	itt	eq
  401bde:	ebb6 0c02 	subseq.w	ip, r6, r2
  401be2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401be6:	f150 0000 	adcs.w	r0, r0, #0
  401bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401bee:	bd70      	pop	{r4, r5, r6, pc}
  401bf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401bf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401bf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401bfc:	bfc2      	ittt	gt
  401bfe:	ebd4 050c 	rsbsgt	r5, r4, ip
  401c02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401c06:	bd70      	popgt	{r4, r5, r6, pc}
  401c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c0c:	f04f 0e00 	mov.w	lr, #0
  401c10:	3c01      	subs	r4, #1
  401c12:	e690      	b.n	401936 <__aeabi_dmul+0xde>
  401c14:	ea45 0e06 	orr.w	lr, r5, r6
  401c18:	e68d      	b.n	401936 <__aeabi_dmul+0xde>
  401c1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401c1e:	ea94 0f0c 	teq	r4, ip
  401c22:	bf08      	it	eq
  401c24:	ea95 0f0c 	teqeq	r5, ip
  401c28:	f43f af3b 	beq.w	401aa2 <__aeabi_dmul+0x24a>
  401c2c:	ea94 0f0c 	teq	r4, ip
  401c30:	d10a      	bne.n	401c48 <__aeabi_ddiv+0x19c>
  401c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401c36:	f47f af34 	bne.w	401aa2 <__aeabi_dmul+0x24a>
  401c3a:	ea95 0f0c 	teq	r5, ip
  401c3e:	f47f af25 	bne.w	401a8c <__aeabi_dmul+0x234>
  401c42:	4610      	mov	r0, r2
  401c44:	4619      	mov	r1, r3
  401c46:	e72c      	b.n	401aa2 <__aeabi_dmul+0x24a>
  401c48:	ea95 0f0c 	teq	r5, ip
  401c4c:	d106      	bne.n	401c5c <__aeabi_ddiv+0x1b0>
  401c4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401c52:	f43f aefd 	beq.w	401a50 <__aeabi_dmul+0x1f8>
  401c56:	4610      	mov	r0, r2
  401c58:	4619      	mov	r1, r3
  401c5a:	e722      	b.n	401aa2 <__aeabi_dmul+0x24a>
  401c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401c60:	bf18      	it	ne
  401c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401c66:	f47f aec5 	bne.w	4019f4 <__aeabi_dmul+0x19c>
  401c6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401c6e:	f47f af0d 	bne.w	401a8c <__aeabi_dmul+0x234>
  401c72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401c76:	f47f aeeb 	bne.w	401a50 <__aeabi_dmul+0x1f8>
  401c7a:	e712      	b.n	401aa2 <__aeabi_dmul+0x24a>

00401c7c <__aeabi_d2iz>:
  401c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  401c80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401c84:	d215      	bcs.n	401cb2 <__aeabi_d2iz+0x36>
  401c86:	d511      	bpl.n	401cac <__aeabi_d2iz+0x30>
  401c88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401c8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  401c90:	d912      	bls.n	401cb8 <__aeabi_d2iz+0x3c>
  401c92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401c9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  401c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401ca2:	fa23 f002 	lsr.w	r0, r3, r2
  401ca6:	bf18      	it	ne
  401ca8:	4240      	negne	r0, r0
  401caa:	4770      	bx	lr
  401cac:	f04f 0000 	mov.w	r0, #0
  401cb0:	4770      	bx	lr
  401cb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401cb6:	d105      	bne.n	401cc4 <__aeabi_d2iz+0x48>
  401cb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  401cbc:	bf08      	it	eq
  401cbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  401cc2:	4770      	bx	lr
  401cc4:	f04f 0000 	mov.w	r0, #0
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop

00401ccc <__aeabi_uldivmod>:
  401ccc:	b953      	cbnz	r3, 401ce4 <__aeabi_uldivmod+0x18>
  401cce:	b94a      	cbnz	r2, 401ce4 <__aeabi_uldivmod+0x18>
  401cd0:	2900      	cmp	r1, #0
  401cd2:	bf08      	it	eq
  401cd4:	2800      	cmpeq	r0, #0
  401cd6:	bf1c      	itt	ne
  401cd8:	f04f 31ff 	movne.w	r1, #4294967295
  401cdc:	f04f 30ff 	movne.w	r0, #4294967295
  401ce0:	f000 b97a 	b.w	401fd8 <__aeabi_idiv0>
  401ce4:	f1ad 0c08 	sub.w	ip, sp, #8
  401ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401cec:	f000 f806 	bl	401cfc <__udivmoddi4>
  401cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
  401cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401cf8:	b004      	add	sp, #16
  401cfa:	4770      	bx	lr

00401cfc <__udivmoddi4>:
  401cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d00:	468c      	mov	ip, r1
  401d02:	460d      	mov	r5, r1
  401d04:	4604      	mov	r4, r0
  401d06:	9e08      	ldr	r6, [sp, #32]
  401d08:	2b00      	cmp	r3, #0
  401d0a:	d151      	bne.n	401db0 <__udivmoddi4+0xb4>
  401d0c:	428a      	cmp	r2, r1
  401d0e:	4617      	mov	r7, r2
  401d10:	d96d      	bls.n	401dee <__udivmoddi4+0xf2>
  401d12:	fab2 fe82 	clz	lr, r2
  401d16:	f1be 0f00 	cmp.w	lr, #0
  401d1a:	d00b      	beq.n	401d34 <__udivmoddi4+0x38>
  401d1c:	f1ce 0c20 	rsb	ip, lr, #32
  401d20:	fa01 f50e 	lsl.w	r5, r1, lr
  401d24:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d28:	fa02 f70e 	lsl.w	r7, r2, lr
  401d2c:	ea4c 0c05 	orr.w	ip, ip, r5
  401d30:	fa00 f40e 	lsl.w	r4, r0, lr
  401d34:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401d38:	0c25      	lsrs	r5, r4, #16
  401d3a:	fbbc f8fa 	udiv	r8, ip, sl
  401d3e:	fa1f f987 	uxth.w	r9, r7
  401d42:	fb0a cc18 	mls	ip, sl, r8, ip
  401d46:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401d4a:	fb08 f309 	mul.w	r3, r8, r9
  401d4e:	42ab      	cmp	r3, r5
  401d50:	d90a      	bls.n	401d68 <__udivmoddi4+0x6c>
  401d52:	19ed      	adds	r5, r5, r7
  401d54:	f108 32ff 	add.w	r2, r8, #4294967295
  401d58:	f080 8123 	bcs.w	401fa2 <__udivmoddi4+0x2a6>
  401d5c:	42ab      	cmp	r3, r5
  401d5e:	f240 8120 	bls.w	401fa2 <__udivmoddi4+0x2a6>
  401d62:	f1a8 0802 	sub.w	r8, r8, #2
  401d66:	443d      	add	r5, r7
  401d68:	1aed      	subs	r5, r5, r3
  401d6a:	b2a4      	uxth	r4, r4
  401d6c:	fbb5 f0fa 	udiv	r0, r5, sl
  401d70:	fb0a 5510 	mls	r5, sl, r0, r5
  401d74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401d78:	fb00 f909 	mul.w	r9, r0, r9
  401d7c:	45a1      	cmp	r9, r4
  401d7e:	d909      	bls.n	401d94 <__udivmoddi4+0x98>
  401d80:	19e4      	adds	r4, r4, r7
  401d82:	f100 33ff 	add.w	r3, r0, #4294967295
  401d86:	f080 810a 	bcs.w	401f9e <__udivmoddi4+0x2a2>
  401d8a:	45a1      	cmp	r9, r4
  401d8c:	f240 8107 	bls.w	401f9e <__udivmoddi4+0x2a2>
  401d90:	3802      	subs	r0, #2
  401d92:	443c      	add	r4, r7
  401d94:	eba4 0409 	sub.w	r4, r4, r9
  401d98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401d9c:	2100      	movs	r1, #0
  401d9e:	2e00      	cmp	r6, #0
  401da0:	d061      	beq.n	401e66 <__udivmoddi4+0x16a>
  401da2:	fa24 f40e 	lsr.w	r4, r4, lr
  401da6:	2300      	movs	r3, #0
  401da8:	6034      	str	r4, [r6, #0]
  401daa:	6073      	str	r3, [r6, #4]
  401dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401db0:	428b      	cmp	r3, r1
  401db2:	d907      	bls.n	401dc4 <__udivmoddi4+0xc8>
  401db4:	2e00      	cmp	r6, #0
  401db6:	d054      	beq.n	401e62 <__udivmoddi4+0x166>
  401db8:	2100      	movs	r1, #0
  401dba:	e886 0021 	stmia.w	r6, {r0, r5}
  401dbe:	4608      	mov	r0, r1
  401dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401dc4:	fab3 f183 	clz	r1, r3
  401dc8:	2900      	cmp	r1, #0
  401dca:	f040 808e 	bne.w	401eea <__udivmoddi4+0x1ee>
  401dce:	42ab      	cmp	r3, r5
  401dd0:	d302      	bcc.n	401dd8 <__udivmoddi4+0xdc>
  401dd2:	4282      	cmp	r2, r0
  401dd4:	f200 80fa 	bhi.w	401fcc <__udivmoddi4+0x2d0>
  401dd8:	1a84      	subs	r4, r0, r2
  401dda:	eb65 0503 	sbc.w	r5, r5, r3
  401dde:	2001      	movs	r0, #1
  401de0:	46ac      	mov	ip, r5
  401de2:	2e00      	cmp	r6, #0
  401de4:	d03f      	beq.n	401e66 <__udivmoddi4+0x16a>
  401de6:	e886 1010 	stmia.w	r6, {r4, ip}
  401dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401dee:	b912      	cbnz	r2, 401df6 <__udivmoddi4+0xfa>
  401df0:	2701      	movs	r7, #1
  401df2:	fbb7 f7f2 	udiv	r7, r7, r2
  401df6:	fab7 fe87 	clz	lr, r7
  401dfa:	f1be 0f00 	cmp.w	lr, #0
  401dfe:	d134      	bne.n	401e6a <__udivmoddi4+0x16e>
  401e00:	1beb      	subs	r3, r5, r7
  401e02:	0c3a      	lsrs	r2, r7, #16
  401e04:	fa1f fc87 	uxth.w	ip, r7
  401e08:	2101      	movs	r1, #1
  401e0a:	fbb3 f8f2 	udiv	r8, r3, r2
  401e0e:	0c25      	lsrs	r5, r4, #16
  401e10:	fb02 3318 	mls	r3, r2, r8, r3
  401e14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401e18:	fb0c f308 	mul.w	r3, ip, r8
  401e1c:	42ab      	cmp	r3, r5
  401e1e:	d907      	bls.n	401e30 <__udivmoddi4+0x134>
  401e20:	19ed      	adds	r5, r5, r7
  401e22:	f108 30ff 	add.w	r0, r8, #4294967295
  401e26:	d202      	bcs.n	401e2e <__udivmoddi4+0x132>
  401e28:	42ab      	cmp	r3, r5
  401e2a:	f200 80d1 	bhi.w	401fd0 <__udivmoddi4+0x2d4>
  401e2e:	4680      	mov	r8, r0
  401e30:	1aed      	subs	r5, r5, r3
  401e32:	b2a3      	uxth	r3, r4
  401e34:	fbb5 f0f2 	udiv	r0, r5, r2
  401e38:	fb02 5510 	mls	r5, r2, r0, r5
  401e3c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401e40:	fb0c fc00 	mul.w	ip, ip, r0
  401e44:	45a4      	cmp	ip, r4
  401e46:	d907      	bls.n	401e58 <__udivmoddi4+0x15c>
  401e48:	19e4      	adds	r4, r4, r7
  401e4a:	f100 33ff 	add.w	r3, r0, #4294967295
  401e4e:	d202      	bcs.n	401e56 <__udivmoddi4+0x15a>
  401e50:	45a4      	cmp	ip, r4
  401e52:	f200 80b8 	bhi.w	401fc6 <__udivmoddi4+0x2ca>
  401e56:	4618      	mov	r0, r3
  401e58:	eba4 040c 	sub.w	r4, r4, ip
  401e5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401e60:	e79d      	b.n	401d9e <__udivmoddi4+0xa2>
  401e62:	4631      	mov	r1, r6
  401e64:	4630      	mov	r0, r6
  401e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e6a:	f1ce 0420 	rsb	r4, lr, #32
  401e6e:	fa05 f30e 	lsl.w	r3, r5, lr
  401e72:	fa07 f70e 	lsl.w	r7, r7, lr
  401e76:	fa20 f804 	lsr.w	r8, r0, r4
  401e7a:	0c3a      	lsrs	r2, r7, #16
  401e7c:	fa25 f404 	lsr.w	r4, r5, r4
  401e80:	ea48 0803 	orr.w	r8, r8, r3
  401e84:	fbb4 f1f2 	udiv	r1, r4, r2
  401e88:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401e8c:	fb02 4411 	mls	r4, r2, r1, r4
  401e90:	fa1f fc87 	uxth.w	ip, r7
  401e94:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401e98:	fb01 f30c 	mul.w	r3, r1, ip
  401e9c:	42ab      	cmp	r3, r5
  401e9e:	fa00 f40e 	lsl.w	r4, r0, lr
  401ea2:	d909      	bls.n	401eb8 <__udivmoddi4+0x1bc>
  401ea4:	19ed      	adds	r5, r5, r7
  401ea6:	f101 30ff 	add.w	r0, r1, #4294967295
  401eaa:	f080 808a 	bcs.w	401fc2 <__udivmoddi4+0x2c6>
  401eae:	42ab      	cmp	r3, r5
  401eb0:	f240 8087 	bls.w	401fc2 <__udivmoddi4+0x2c6>
  401eb4:	3902      	subs	r1, #2
  401eb6:	443d      	add	r5, r7
  401eb8:	1aeb      	subs	r3, r5, r3
  401eba:	fa1f f588 	uxth.w	r5, r8
  401ebe:	fbb3 f0f2 	udiv	r0, r3, r2
  401ec2:	fb02 3310 	mls	r3, r2, r0, r3
  401ec6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401eca:	fb00 f30c 	mul.w	r3, r0, ip
  401ece:	42ab      	cmp	r3, r5
  401ed0:	d907      	bls.n	401ee2 <__udivmoddi4+0x1e6>
  401ed2:	19ed      	adds	r5, r5, r7
  401ed4:	f100 38ff 	add.w	r8, r0, #4294967295
  401ed8:	d26f      	bcs.n	401fba <__udivmoddi4+0x2be>
  401eda:	42ab      	cmp	r3, r5
  401edc:	d96d      	bls.n	401fba <__udivmoddi4+0x2be>
  401ede:	3802      	subs	r0, #2
  401ee0:	443d      	add	r5, r7
  401ee2:	1aeb      	subs	r3, r5, r3
  401ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401ee8:	e78f      	b.n	401e0a <__udivmoddi4+0x10e>
  401eea:	f1c1 0720 	rsb	r7, r1, #32
  401eee:	fa22 f807 	lsr.w	r8, r2, r7
  401ef2:	408b      	lsls	r3, r1
  401ef4:	fa05 f401 	lsl.w	r4, r5, r1
  401ef8:	ea48 0303 	orr.w	r3, r8, r3
  401efc:	fa20 fe07 	lsr.w	lr, r0, r7
  401f00:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401f04:	40fd      	lsrs	r5, r7
  401f06:	ea4e 0e04 	orr.w	lr, lr, r4
  401f0a:	fbb5 f9fc 	udiv	r9, r5, ip
  401f0e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401f12:	fb0c 5519 	mls	r5, ip, r9, r5
  401f16:	fa1f f883 	uxth.w	r8, r3
  401f1a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401f1e:	fb09 f408 	mul.w	r4, r9, r8
  401f22:	42ac      	cmp	r4, r5
  401f24:	fa02 f201 	lsl.w	r2, r2, r1
  401f28:	fa00 fa01 	lsl.w	sl, r0, r1
  401f2c:	d908      	bls.n	401f40 <__udivmoddi4+0x244>
  401f2e:	18ed      	adds	r5, r5, r3
  401f30:	f109 30ff 	add.w	r0, r9, #4294967295
  401f34:	d243      	bcs.n	401fbe <__udivmoddi4+0x2c2>
  401f36:	42ac      	cmp	r4, r5
  401f38:	d941      	bls.n	401fbe <__udivmoddi4+0x2c2>
  401f3a:	f1a9 0902 	sub.w	r9, r9, #2
  401f3e:	441d      	add	r5, r3
  401f40:	1b2d      	subs	r5, r5, r4
  401f42:	fa1f fe8e 	uxth.w	lr, lr
  401f46:	fbb5 f0fc 	udiv	r0, r5, ip
  401f4a:	fb0c 5510 	mls	r5, ip, r0, r5
  401f4e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401f52:	fb00 f808 	mul.w	r8, r0, r8
  401f56:	45a0      	cmp	r8, r4
  401f58:	d907      	bls.n	401f6a <__udivmoddi4+0x26e>
  401f5a:	18e4      	adds	r4, r4, r3
  401f5c:	f100 35ff 	add.w	r5, r0, #4294967295
  401f60:	d229      	bcs.n	401fb6 <__udivmoddi4+0x2ba>
  401f62:	45a0      	cmp	r8, r4
  401f64:	d927      	bls.n	401fb6 <__udivmoddi4+0x2ba>
  401f66:	3802      	subs	r0, #2
  401f68:	441c      	add	r4, r3
  401f6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401f6e:	eba4 0408 	sub.w	r4, r4, r8
  401f72:	fba0 8902 	umull	r8, r9, r0, r2
  401f76:	454c      	cmp	r4, r9
  401f78:	46c6      	mov	lr, r8
  401f7a:	464d      	mov	r5, r9
  401f7c:	d315      	bcc.n	401faa <__udivmoddi4+0x2ae>
  401f7e:	d012      	beq.n	401fa6 <__udivmoddi4+0x2aa>
  401f80:	b156      	cbz	r6, 401f98 <__udivmoddi4+0x29c>
  401f82:	ebba 030e 	subs.w	r3, sl, lr
  401f86:	eb64 0405 	sbc.w	r4, r4, r5
  401f8a:	fa04 f707 	lsl.w	r7, r4, r7
  401f8e:	40cb      	lsrs	r3, r1
  401f90:	431f      	orrs	r7, r3
  401f92:	40cc      	lsrs	r4, r1
  401f94:	6037      	str	r7, [r6, #0]
  401f96:	6074      	str	r4, [r6, #4]
  401f98:	2100      	movs	r1, #0
  401f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f9e:	4618      	mov	r0, r3
  401fa0:	e6f8      	b.n	401d94 <__udivmoddi4+0x98>
  401fa2:	4690      	mov	r8, r2
  401fa4:	e6e0      	b.n	401d68 <__udivmoddi4+0x6c>
  401fa6:	45c2      	cmp	sl, r8
  401fa8:	d2ea      	bcs.n	401f80 <__udivmoddi4+0x284>
  401faa:	ebb8 0e02 	subs.w	lr, r8, r2
  401fae:	eb69 0503 	sbc.w	r5, r9, r3
  401fb2:	3801      	subs	r0, #1
  401fb4:	e7e4      	b.n	401f80 <__udivmoddi4+0x284>
  401fb6:	4628      	mov	r0, r5
  401fb8:	e7d7      	b.n	401f6a <__udivmoddi4+0x26e>
  401fba:	4640      	mov	r0, r8
  401fbc:	e791      	b.n	401ee2 <__udivmoddi4+0x1e6>
  401fbe:	4681      	mov	r9, r0
  401fc0:	e7be      	b.n	401f40 <__udivmoddi4+0x244>
  401fc2:	4601      	mov	r1, r0
  401fc4:	e778      	b.n	401eb8 <__udivmoddi4+0x1bc>
  401fc6:	3802      	subs	r0, #2
  401fc8:	443c      	add	r4, r7
  401fca:	e745      	b.n	401e58 <__udivmoddi4+0x15c>
  401fcc:	4608      	mov	r0, r1
  401fce:	e708      	b.n	401de2 <__udivmoddi4+0xe6>
  401fd0:	f1a8 0802 	sub.w	r8, r8, #2
  401fd4:	443d      	add	r5, r7
  401fd6:	e72b      	b.n	401e30 <__udivmoddi4+0x134>

00401fd8 <__aeabi_idiv0>:
  401fd8:	4770      	bx	lr
  401fda:	bf00      	nop

00401fdc <__libc_init_array>:
  401fdc:	b570      	push	{r4, r5, r6, lr}
  401fde:	4e0f      	ldr	r6, [pc, #60]	; (40201c <__libc_init_array+0x40>)
  401fe0:	4d0f      	ldr	r5, [pc, #60]	; (402020 <__libc_init_array+0x44>)
  401fe2:	1b76      	subs	r6, r6, r5
  401fe4:	10b6      	asrs	r6, r6, #2
  401fe6:	bf18      	it	ne
  401fe8:	2400      	movne	r4, #0
  401fea:	d005      	beq.n	401ff8 <__libc_init_array+0x1c>
  401fec:	3401      	adds	r4, #1
  401fee:	f855 3b04 	ldr.w	r3, [r5], #4
  401ff2:	4798      	blx	r3
  401ff4:	42a6      	cmp	r6, r4
  401ff6:	d1f9      	bne.n	401fec <__libc_init_array+0x10>
  401ff8:	4e0a      	ldr	r6, [pc, #40]	; (402024 <__libc_init_array+0x48>)
  401ffa:	4d0b      	ldr	r5, [pc, #44]	; (402028 <__libc_init_array+0x4c>)
  401ffc:	1b76      	subs	r6, r6, r5
  401ffe:	f000 f8a7 	bl	402150 <_init>
  402002:	10b6      	asrs	r6, r6, #2
  402004:	bf18      	it	ne
  402006:	2400      	movne	r4, #0
  402008:	d006      	beq.n	402018 <__libc_init_array+0x3c>
  40200a:	3401      	adds	r4, #1
  40200c:	f855 3b04 	ldr.w	r3, [r5], #4
  402010:	4798      	blx	r3
  402012:	42a6      	cmp	r6, r4
  402014:	d1f9      	bne.n	40200a <__libc_init_array+0x2e>
  402016:	bd70      	pop	{r4, r5, r6, pc}
  402018:	bd70      	pop	{r4, r5, r6, pc}
  40201a:	bf00      	nop
  40201c:	0040215c 	.word	0x0040215c
  402020:	0040215c 	.word	0x0040215c
  402024:	00402164 	.word	0x00402164
  402028:	0040215c 	.word	0x0040215c

0040202c <register_fini>:
  40202c:	4b02      	ldr	r3, [pc, #8]	; (402038 <register_fini+0xc>)
  40202e:	b113      	cbz	r3, 402036 <register_fini+0xa>
  402030:	4802      	ldr	r0, [pc, #8]	; (40203c <register_fini+0x10>)
  402032:	f000 b805 	b.w	402040 <atexit>
  402036:	4770      	bx	lr
  402038:	00000000 	.word	0x00000000
  40203c:	0040204d 	.word	0x0040204d

00402040 <atexit>:
  402040:	2300      	movs	r3, #0
  402042:	4601      	mov	r1, r0
  402044:	461a      	mov	r2, r3
  402046:	4618      	mov	r0, r3
  402048:	f000 b81e 	b.w	402088 <__register_exitproc>

0040204c <__libc_fini_array>:
  40204c:	b538      	push	{r3, r4, r5, lr}
  40204e:	4c0a      	ldr	r4, [pc, #40]	; (402078 <__libc_fini_array+0x2c>)
  402050:	4d0a      	ldr	r5, [pc, #40]	; (40207c <__libc_fini_array+0x30>)
  402052:	1b64      	subs	r4, r4, r5
  402054:	10a4      	asrs	r4, r4, #2
  402056:	d00a      	beq.n	40206e <__libc_fini_array+0x22>
  402058:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40205c:	3b01      	subs	r3, #1
  40205e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402062:	3c01      	subs	r4, #1
  402064:	f855 3904 	ldr.w	r3, [r5], #-4
  402068:	4798      	blx	r3
  40206a:	2c00      	cmp	r4, #0
  40206c:	d1f9      	bne.n	402062 <__libc_fini_array+0x16>
  40206e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402072:	f000 b877 	b.w	402164 <_fini>
  402076:	bf00      	nop
  402078:	00402174 	.word	0x00402174
  40207c:	00402170 	.word	0x00402170

00402080 <__retarget_lock_acquire_recursive>:
  402080:	4770      	bx	lr
  402082:	bf00      	nop

00402084 <__retarget_lock_release_recursive>:
  402084:	4770      	bx	lr
  402086:	bf00      	nop

00402088 <__register_exitproc>:
  402088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40208c:	4d2c      	ldr	r5, [pc, #176]	; (402140 <__register_exitproc+0xb8>)
  40208e:	4606      	mov	r6, r0
  402090:	6828      	ldr	r0, [r5, #0]
  402092:	4698      	mov	r8, r3
  402094:	460f      	mov	r7, r1
  402096:	4691      	mov	r9, r2
  402098:	f7ff fff2 	bl	402080 <__retarget_lock_acquire_recursive>
  40209c:	4b29      	ldr	r3, [pc, #164]	; (402144 <__register_exitproc+0xbc>)
  40209e:	681c      	ldr	r4, [r3, #0]
  4020a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	d03e      	beq.n	402126 <__register_exitproc+0x9e>
  4020a8:	685a      	ldr	r2, [r3, #4]
  4020aa:	2a1f      	cmp	r2, #31
  4020ac:	dc1c      	bgt.n	4020e8 <__register_exitproc+0x60>
  4020ae:	f102 0e01 	add.w	lr, r2, #1
  4020b2:	b176      	cbz	r6, 4020d2 <__register_exitproc+0x4a>
  4020b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4020b8:	2401      	movs	r4, #1
  4020ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4020be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4020c2:	4094      	lsls	r4, r2
  4020c4:	4320      	orrs	r0, r4
  4020c6:	2e02      	cmp	r6, #2
  4020c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4020cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4020d0:	d023      	beq.n	40211a <__register_exitproc+0x92>
  4020d2:	3202      	adds	r2, #2
  4020d4:	f8c3 e004 	str.w	lr, [r3, #4]
  4020d8:	6828      	ldr	r0, [r5, #0]
  4020da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4020de:	f7ff ffd1 	bl	402084 <__retarget_lock_release_recursive>
  4020e2:	2000      	movs	r0, #0
  4020e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4020e8:	4b17      	ldr	r3, [pc, #92]	; (402148 <__register_exitproc+0xc0>)
  4020ea:	b30b      	cbz	r3, 402130 <__register_exitproc+0xa8>
  4020ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4020f0:	f3af 8000 	nop.w
  4020f4:	4603      	mov	r3, r0
  4020f6:	b1d8      	cbz	r0, 402130 <__register_exitproc+0xa8>
  4020f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4020fc:	6002      	str	r2, [r0, #0]
  4020fe:	2100      	movs	r1, #0
  402100:	6041      	str	r1, [r0, #4]
  402102:	460a      	mov	r2, r1
  402104:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402108:	f04f 0e01 	mov.w	lr, #1
  40210c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402110:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402114:	2e00      	cmp	r6, #0
  402116:	d0dc      	beq.n	4020d2 <__register_exitproc+0x4a>
  402118:	e7cc      	b.n	4020b4 <__register_exitproc+0x2c>
  40211a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40211e:	430c      	orrs	r4, r1
  402120:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402124:	e7d5      	b.n	4020d2 <__register_exitproc+0x4a>
  402126:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40212a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40212e:	e7bb      	b.n	4020a8 <__register_exitproc+0x20>
  402130:	6828      	ldr	r0, [r5, #0]
  402132:	f7ff ffa7 	bl	402084 <__retarget_lock_release_recursive>
  402136:	f04f 30ff 	mov.w	r0, #4294967295
  40213a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40213e:	bf00      	nop
  402140:	20401008 	.word	0x20401008
  402144:	0040214c 	.word	0x0040214c
  402148:	00000000 	.word	0x00000000

0040214c <_global_impure_ptr>:
  40214c:	20400be0                                ..@ 

00402150 <_init>:
  402150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402152:	bf00      	nop
  402154:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402156:	bc08      	pop	{r3}
  402158:	469e      	mov	lr, r3
  40215a:	4770      	bx	lr

0040215c <__init_array_start>:
  40215c:	0040202d 	.word	0x0040202d

00402160 <__frame_dummy_init_array_entry>:
  402160:	00400165                                e.@.

00402164 <_fini>:
  402164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402166:	bf00      	nop
  402168:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40216a:	bc08      	pop	{r3}
  40216c:	469e      	mov	lr, r3
  40216e:	4770      	bx	lr

00402170 <__fini_array_start>:
  402170:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <notes1>:
20400010:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400020:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400030:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400040:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400050:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400060:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400070:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
20400080:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
20400090:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
204000a0:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
204000b0:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
204000c0:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
204000d0:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
204000e0:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
204000f0:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
20400100:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
20400110:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400120:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
20400130:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
20400140:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
20400150:	020b 0000 020b 0000 0000 0000 020b 0000     ................
20400160:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
20400170:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
20400180:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400190:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204001a0:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204001b0:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204001c0:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
204001d0:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204001e0:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
204001f0:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
20400200:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
20400210:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400220:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
20400230:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
20400240:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
20400250:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400260:	0000 0000 0293 0000 0000 0000 0000 0000     ................
20400270:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400280:	0293 0000 0000 0000 0310 0000 0000 0000     ................
20400290:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
204002a0:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
204002b8:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
204002c8:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
204002d8:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
204002e8:	0293 0000 0293 0000 0000 0000 0310 0000     ................
204002f8:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
20400308:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400318:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
20400328:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
20400338:	01b8 0000                                   ....

2040033c <notes2>:
	...
20400344:	0527 0000 06e0 0000 07b8 0000 082d 0000     '...........-...
20400354:	07b8 0000 06e0 0000 06e0 0000 0000 0000     ................
20400364:	0527 0000 06e0 0000 07b8 0000 082d 0000     '...........-...
20400374:	092d 0000 082d 0000 092d 0000 092d 0000     -...-...-...-...
20400384:	0a4d 0000 0000 0000 0527 0000 06e0 0000     M.......'.......
20400394:	07b8 0000 082d 0000 07b8 0000 06e0 0000     ....-...........
204003a4:	06e0 0000 0000 0000 06e0 0000 0a4d 0000     ............M...
204003b4:	092d 0000 0000 0000 06e0 0000 0a4d 0000     -...........M...
204003c4:	092d 0000 0000 0000 0620 0000 0620 0000     -....... ... ...
204003d4:	0000 0000 06e0 0000 06e0 0000 0000 0000     ................
204003e4:	0000 0000 0527 0000 06e0 0000 07b8 0000     ....'...........
204003f4:	082d 0000 0000 0000 082d 0000 07b8 0000     -.......-.......
20400404:	082d 0000 07b8 0000 0000 0000 0527 0000     -...........'...
20400414:	07b8 0000 082d 0000 092d 0000 0000 0000     ....-...-.......
20400424:	0a4d 0000 082d 0000 07b8 0000 06e0 0000     M...-...........
20400434:	0000 0000 06e0 0000 082d 0000 092d 0000     ........-...-...
20400444:	0a4d 0000 06e0 0000 0417 0000 0417 0000     M...............
20400454:	092d 0000 0a4d 0000 0a4d 0000 0a4d 0000     -...M...M...M...
20400464:	0310 0000 02ba 0000 0a4d 0000 0a4d 0000     ........M...M...
	...
20400480:	0527 0000 06e0 0000 07b8 0000 082d 0000     '...........-...
20400490:	07b8 0000 06e0 0000 06e0 0000 0000 0000     ................
204004a0:	0527 0000 06e0 0000 07b8 0000 082d 0000     '...........-...
204004b0:	092d 0000 082d 0000 092d 0000 092d 0000     -...-...-...-...
204004c0:	0a4d 0000 0000 0000 0527 0000 06e0 0000     M.......'.......
204004d0:	07b8 0000 082d 0000 07b8 0000 06e0 0000     ....-...........
204004e0:	06e0 0000 06e0 0000 0a4d 0000 092d 0000     ........M...-...
204004f0:	0000 0000 06e0 0000 0a4d 0000 092d 0000     ........M...-...
20400500:	0000 0000 0620 0000 0620 0000 0000 0000     .... ... .......
20400510:	06e0 0000 06e0 0000 0000 0000 0000 0000     ................
20400520:	06e0 0000 0a4d 0000 092d 0000 0000 0000     ....M...-.......
20400530:	06e0 0000 0a4d 0000 092d 0000 0000 0000     ....M...-.......
20400540:	0620 0000 0620 0000 0000 0000 06e0 0000      ... ...........
20400550:	06e0 0000 0000 0000 06e0 0000 0a4d 0000     ............M...
20400560:	092d 0000 0000 0000 06e0 0000 0a4d 0000     -...........M...
20400570:	092d 0000 0000 0000 0620 0000 0620 0000     -....... ... ...
20400580:	06e0 0000 06e0 0000 0000 0000               ............

2040058c <notes3>:
2040058c:	0293 0000 0293 0000 0293 0000 0293 0000     ................
2040059c:	0293 0000 0293 0000 0293 0000 0310 0000     ................
204005ac:	020b 0000 024b 0000 0293 0000 02ba 0000     ....K...........
204005bc:	02ba 0000 02ba 0000 02ba 0000 02ba 0000     ................
204005cc:	0293 0000 0293 0000 0293 0000 0293 0000     ................
204005dc:	0293 0000 024b 0000 024b 0000 0293 0000     ....K...K.......
204005ec:	024b 0000 0310 0000                         K.......

204005f4 <duration1>:
204005f4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400604:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400614:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400624:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400634:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400644:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400654:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400664:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400674:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400684:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400694:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204006a4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204006b4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204006c4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204006d4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204006e4:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
204006f4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400704:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400714:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
20400724:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400734:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400744:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400754:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
20400764:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400774:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400784:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400794:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204007a4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204007b4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204007c4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204007d4:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204007e4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204007f4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400804:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400814:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
20400824:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400834:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400844:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
20400854:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
20400864:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400874:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400884:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400894:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204008a4:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
204008b4:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
204008c4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204008d4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204008e4:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
204008f4:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
20400904:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400914:	007d 0000 007d 0000 01f4 0000               }...}.......

20400920 <duration2>:
20400920:	01f4 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400930:	007d 0000 01f4 0000 0177 0000 007d 0000     }.......w...}...
20400940:	01f4 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400950:	007d 0000 01f4 0000 00fa 0000 007d 0000     }...........}...
20400960:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
20400970:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
20400980:	0177 0000 007d 0000 01f4 0000 007d 0000     w...}.......}...
20400990:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204009a0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204009b0:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204009c0:	02ee 0000 01f4 0000 007d 0000 007d 0000     ........}...}...
204009d0:	007d 0000 007d 0000 01f4 0000 00fa 0000     }...}...........
204009e0:	00fa 0000 00fa 0000 00fa 0000 00fa 0000     ................
204009f0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400a00:	01f4 0000 00fa 0000 00fa 0000 00fa 0000     ................
20400a10:	00fa 0000 00fa 0000 007d 0000 007d 0000     ........}...}...
20400a20:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400a30:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400a40:	0177 0000 007d 0000 00fa 0000 007d 0000     w...}.......}...
20400a50:	007d 0000 01f4 0000 01f4 0000 01f4 0000     }...............
20400a60:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400a70:	01f4 0000 0177 0000 007d 0000 01f4 0000     ....w...}.......
20400a80:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400a90:	01f4 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400aa0:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400ab0:	007d 0000 007d 0000 01f4 0000 0177 0000     }...}.......w...
20400ac0:	007d 0000 01f4 0000 007d 0000 007d 0000     }.......}...}...
20400ad0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400ae0:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400af0:	007d 0000 007d 0000 007d 0000 02ee 0000     }...}...}.......
20400b00:	01f4 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400b10:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400b20:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400b30:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400b40:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400b50:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400b60:	00fa 0000 007d 0000 007d 0000 0177 0000     ....}...}...w...
20400b70:	01f4 0000                                   ....

20400b74 <duration3>:
20400b74:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400b84:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400b94:	007d 0000 007d 0000 01f4 0000 007d 0000     }...}.......}...
20400ba4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400bb4:	007d 0000 007d 0000 003e 0000 003e 0000     }...}...>...>...
20400bc4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400bd4:	00fa 0000 00fa 0000 0000 0000               ............

20400be0 <impure_data>:
20400be0:	0000 0000 0ecc 2040 0f34 2040 0f9c 2040     ......@ 4.@ ..@ 
	...
20400c88:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400c98:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20401008 <__atexit_recursive_mutex>:
20401008:	1098 2040                                   ..@ 
